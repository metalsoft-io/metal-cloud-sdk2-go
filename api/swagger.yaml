openapi: 3.0.0
info:
  title: MetalSoft REST API
  description: MetalSoft REST API documentation
  contact:
    name: MetalSoft
    url: https://www.metalsoft.io/contact
    email: support@metalsoft.io
  version: "2.0"
externalDocs:
  description: MetalSoft Documentation
  url: https://docs.metalsoft.io/
servers:
- url: ""
  description: MetalSoft
tags:
- name: Security
  description: Security configuration and control.
- name: System
  description: System operations.
- name: Configuration
  description: System configuration operations.
- name: Accounts
  description: Account management operations.
- name: Users
  description: User management operations.
- name: Server
  description: Server management.
- name: Storage
  description: Storage management.
- name: Network Devices
  description: Network device management.
- name: Resource Pools
  description: Resource pool management.
- name: Infrastructure
  description: Infrastructures group tenant resources.
- name: Network
  description: Networks management operations.
- name: VM Pools
  description: A cluster or system that acts as a pool for creating VMs.
- name: VM Types
  description: VM types management operations.
- name: VMs
  description: VM management operations.
- name: VM Instance
  description: Virtual compute instances part of an infrastructure.
- name: VM Instance Group
  description: A group of virtual compute instances part of an infrastructure.
- name: File Share
  description: File shares that can be attached to one or more servers.
- name: Bucket
  description: Buckets that can be attached to one or more servers.
- name: Extension
  description: Extensions are used to add extended functionality like deploying clustered
    application.
- name: Extension Instance
  description: Extension instances part of an infrastructure.
- name: AI
  description: Eli AI assistant operations.
paths:
  /api/v2/accounts:
    get:
      tags:
      - Accounts
      summary: Get all accounts
      description: Returns all accounts
      operationId: getAccounts
      parameters: []
      responses:
        "200":
          description: Returns all accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountDto'
                x-content-type: application/json
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - JWT: []
      - apiKey: []
    post:
      tags:
      - Accounts
      summary: Create account
      description: Creates an account
      operationId: createAccount
      parameters: []
      requestBody:
        description: The account to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountDto'
        required: true
      responses:
        "201":
          description: Account successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/accounts/{accountId}:
    get:
      tags:
      - Accounts
      summary: Get account by id
      description: Returns an account by id
      operationId: getAccount
      parameters:
      - name: accountId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: recursion
        in: query
        description: The recursion level of the displayed details. Default is 0.
        required: false
        style: form
        explode: true
        schema:
          type: number
      responses:
        "200":
          description: Returns an account by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - Accounts
      summary: Update account
      description: Updates an account
      operationId: updateAccount
      parameters:
      - name: accountId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The account updates
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountDto'
        required: true
      responses:
        "200":
          description: Account successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/accounts/{accountId}/actions/archive:
    post:
      tags:
      - Accounts
      summary: Archive account
      description: Archives an account
      operationId: archiveAccount
      parameters:
      - name: accountId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Account successfully archived
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/accounts/{accountId}/actions/unarchive:
    post:
      tags:
      - Accounts
      summary: Unarchive account
      description: Unarchives an account
      operationId: unarchiveAccount
      parameters:
      - name: accountId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Account successfully unarchived
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/accounts/{accountId}/limits:
    get:
      tags:
      - Accounts
      summary: Get account limits
      description: Returns the limits of an account
      operationId: getAccountLimits
      parameters:
      - name: accountId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns the limits of an account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountLimitsDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - Accounts
      summary: Update account limits
      description: Updates the limits of an account
      operationId: updateAccountLimits
      parameters:
      - name: accountId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The account limits updates
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountLimitsDto'
        required: true
      responses:
        "200":
          description: Account limits successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountLimitsDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/accounts/{accountId}/users:
    get:
      tags:
      - Accounts
      summary: Get users for account
      description: Returns users for an account
      operationId: getAccountUsers
      parameters:
      - name: accountId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns users for an account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
                x-content-type: application/json
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/users:
    get:
      tags:
      - Users
      summary: Get users
      description: Returns a list of users
      operationId: getUsers
      parameters: []
      responses:
        "200":
          description: Returns a list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
                x-content-type: application/json
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - JWT: []
      - apiKey: []
    post:
      tags:
      - Users
      summary: Creates a user
      description: Creates a user
      operationId: createUser
      parameters: []
      requestBody:
        description: The user to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
        required: true
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/users/{userId}:
    get:
      tags:
      - Users
      summary: Get user
      description: Returns a user
      operationId: getUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: recursion
        in: query
        description: The recursion level of the displayed details. Default is 0.
        required: false
        style: form
        explode: true
        schema:
          type: number
      responses:
        "200":
          description: Returns a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - Users
      summary: Update user
      description: Updates a user
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The user updates
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
        required: true
      responses:
        "200":
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/users/{userId}/actions/change-account:
    post:
      tags:
      - Users
      summary: Change account for user
      description: Changes account for user
      operationId: changeUserAccount
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The new account id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserAccountDto'
        required: true
      responses:
        "200":
          description: Account successfully changed for user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/users/{userId}/actions/archive:
    post:
      tags:
      - Users
      summary: Archive user
      description: Archives a user
      operationId: archiveUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: User successfully archived
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/users/{userId}/actions/unarchive:
    post:
      tags:
      - Users
      summary: Unarchive user
      description: Unarchives a user
      operationId: unarchiveUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: User successfully unarchived
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/users/{userId}/limits:
    get:
      tags:
      - Users
      summary: Get user limits
      description: Returns the limits of a user
      operationId: getUserLimits
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns the limits of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLimitsDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - Users
      summary: Update user limits
      description: Updates the limits of a user
      operationId: updateUserLimits
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The new limits
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLimitsDto'
        required: true
      responses:
        "200":
          description: User limits successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLimitsDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/authentication/providers:
    get:
      tags:
      - Security
      summary: Get available authentication providers
      description: Returns the available authentication providers
      operationId: listProviders
      parameters: []
      responses:
        "200":
          description: Returns the available authentication providers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthenticationProvider'
                x-content-type: application/json
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - JWT: []
      - apiKey: []
  /api/v2/authentication/providers/{name}:
    patch:
      tags:
      - Security
      summary: Updates authentication provider
      description: Updates authentication provider
      operationId: updateProvider
      parameters:
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The provider updates
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationProviderUpdate'
        required: true
      responses:
        "200":
          description: Authentication provider successfully updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthenticationProvider'
                x-content-type: application/json
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/resource-pools:
    get:
      tags:
      - Resource Pools
      summary: Get all Resource Pools
      description: Returns list of all Resource Pools
      operationId: getResourcePools
      parameters: []
      responses:
        "200":
          description: Returns list of all Resource Pools
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourcePoolWithStatsDto'
                x-content-type: application/json
        "401":
          description: Unauthorized
      security:
      - JWT: []
      - apiKey: []
    post:
      tags:
      - Resource Pools
      summary: Creates a Resource Pool
      description: Creates a Resource Pool
      operationId: createResourcePool
      parameters: []
      requestBody:
        description: The Resource Pool create object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourcePoolDto'
        required: true
      responses:
        "200":
          description: The Resource Pool successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePoolDto'
        "401":
          description: Unauthorized
        "409":
          description: Duplicate resource pool
      security:
      - JWT: []
      - apiKey: []
  /api/v2/resource-pools/{resourcePoolId}:
    get:
      tags:
      - Resource Pools
      summary: Get Resource Pool information
      description: Returns Resource Pool information
      operationId: getResourcePool
      parameters:
      - name: resourcePoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns Resource Pool information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePoolDto'
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    put:
      tags:
      - Resource Pools
      summary: Updates Resource Pool information
      description: Updates Resource Pool information
      operationId: updateResourcePool
      parameters:
      - name: resourcePoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The Resource Pool update object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResourcePoolDto'
        required: true
      responses:
        "200":
          description: The Resource Pool was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePoolDto'
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    delete:
      tags:
      - Resource Pools
      summary: Deletes a Resource Pool
      description: Deletes a Resource Pool
      operationId: deleteResourcePool
      parameters:
      - name: resourcePoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The Resource Pool was successfully deleted
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/resource-pools/{resourcePoolId}/servers:
    get:
      tags:
      - Resource Pools
      summary: Get all servers that are part of a Resource Pool
      description: Returns list of all servers that are part of a Resource Pool
      operationId: getResourcePoolServers
      parameters:
      - name: resourcePoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns list of all servers that are part of a Resource Pool
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/resource-pools/{resourcePoolId}/server/{serverId}:
    put:
      tags:
      - Resource Pools
      summary: Add a server to a Resource Pool
      description: Add a server to a Resource Pool
      operationId: addServerToResourcePool
      parameters:
      - name: resourcePoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: serverId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The server was successfully added to the Resource Pool
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    delete:
      tags:
      - Resource Pools
      summary: Remove a server from a Resource Pool
      description: Remove a server from a Resource Pool
      operationId: removeServerFromResourcePool
      parameters:
      - name: resourcePoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: serverId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The server was successfully removed from the Resource Pool
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/resource-pools/{resourcePoolId}/subnet-pools:
    get:
      tags:
      - Resource Pools
      summary: Get all subnet pools that are part of a resource pool
      description: Returns list of all subnet pools that are part of a resource pool
      operationId: getResourcePoolSubnetPools
      parameters:
      - name: resourcePoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns list of all subnet pools that are part of a resource
            pool
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/resource-pools/{resourcePoolId}/subnet-pool/{subnetPoolId}:
    put:
      tags:
      - Resource Pools
      summary: Add a subnet pool to a resource pool
      description: Add a subnet pool to a resource pool
      operationId: addSubnetPoolToResourcePool
      parameters:
      - name: resourcePoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: subnetPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The subnet was successfully added to the resource pool
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    delete:
      tags:
      - Resource Pools
      summary: Remove a subnet from a resource pool
      description: Remove a subnet from a resource pool
      operationId: removeSubnetPoolFromResourcePool
      parameters:
      - name: resourcePoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: subnetPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The subnet pool was successfully removed from the resource
            pool
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/resource-pools/{resourcePoolId}/users:
    get:
      tags:
      - Resource Pools
      summary: Get all users that have access to a Resource Pool
      description: Returns list of all users that have access to a Resource Pool
      operationId: getResourcePoolUsers
      parameters:
      - name: resourcePoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns list of all users that have access to a Resource Pool
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/resource-pools/user/{userId}:
    get:
      tags:
      - Resource Pools
      summary: Get all Resource Pools that a user has access to
      description: Returns list of all Resource Pools that a user has access to
      operationId: getUserResourcePools
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns list of all Resource Pools that a user has access to
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/resource-pools/user/{userId}/pool/{resourcePoolId}:
    post:
      tags:
      - Resource Pools
      summary: Add a user to a Resource Pool
      description: Add a user to a Resource Pool
      operationId: addResourcePoolUser
      parameters:
      - name: resourcePoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The user was successfully added to the Resource Pool
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    delete:
      tags:
      - Resource Pools
      summary: Remove a user from a Resource Pool
      description: Remove a user from a Resource Pool
      operationId: removeResourcePoolUser
      parameters:
      - name: resourcePoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The user was successfully removed from the Resource Pool
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vms/{vmId}:
    get:
      tags:
      - VMs
      summary: Retrieves the VM information
      description: Retrieves the VM information
      operationId: getVM
      parameters:
      - name: vmId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The VM information was successfully retrieved
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - VMs
      summary: Updates VM information
      description: Updates VM information
      operationId: updateVM
      parameters:
      - name: vmId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The VM update object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVM'
        required: true
      responses:
        "200":
          description: The VM information successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VM'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vm-pools:
    get:
      tags:
      - VM Pools
      summary: Get all VM Pools
      description: Returns list of all VM Pools
      operationId: getVMPools
      parameters: []
      responses:
        "200":
          description: Returns list of all VM Pools
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMPoolList'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    post:
      tags:
      - VM Pools
      summary: Creates a VM Pool
      description: Creates a VM Pool
      operationId: createVMPool
      parameters: []
      requestBody:
        description: The VM Pool create object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVMPool'
        required: true
      responses:
        "200":
          description: The VM Pool successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMPool'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vm-pools/{vmPoolId}:
    get:
      tags:
      - VM Pools
      summary: Get VM Pool information
      description: Returns VM Pool information
      operationId: getVMPool
      parameters:
      - name: vmPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns VM Pool information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMPool'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    delete:
      tags:
      - VM Pools
      summary: Deletes a VM Pool
      description: Deletes a VM Pool
      operationId: deleteVMPool
      parameters:
      - name: vmPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The VM Pool successfully deleted
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - VM Pools
      summary: Updates VM Pool information
      description: Updates VM Pool information
      operationId: updateVMPool
      parameters:
      - name: vmPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The VM Pool update object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVMPool'
        required: true
      responses:
        "200":
          description: The VM Pool information successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMPool'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vm-pools/{vmPoolId}/vms:
    get:
      tags:
      - VM Pools
      summary: Returns all VMs linked to the VM Pool
      description: Returns all VMs linked to the VM Pool
      operationId: getVMPoolVMs
      parameters:
      - name: vmPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returned all VMs linked to the VM Pool
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vm-pools/{vmPoolId}/cluster-hosts:
    get:
      tags:
      - VM Pools
      summary: Get list of VM Cluster Hosts linked to the VM Pool
      description: Returns list of VM Cluster Hosts linked to the VM Pool
      operationId: getVMPoolClusterHosts
      parameters:
      - name: vmPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns list of VM Cluster Hosts linked to the VM Pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMPoolHostsList'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vm-pools/{vmPoolId}/cluster-hosts/{vmPoolClusterHostId}:
    get:
      tags:
      - VM Pools
      summary: Retrieves a VM Cluster Host
      description: Returns a VM Cluster Host
      operationId: getVMPoolClusterHost
      parameters:
      - name: vmPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmPoolClusterHostId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns a VM Cluster Host
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMPoolHosts'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vm-pools/{vmPoolId}/cluster-hosts/{vmPoolClusterHostId}/interfaces:
    get:
      tags:
      - VM Pools
      summary: Retrieves a list of VM Cluster Host Interfaces
      description: Returns a list of VM Cluster Host Interfaces
      operationId: getVMPoolClusterHostInterfaces
      parameters:
      - name: vmPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmPoolClusterHostId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns a list of VM Cluster Host Interfaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VMPoolHostInterfaces'
                x-content-type: application/json
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vm-pools/{vmPoolId}/cluster-hosts/{vmPoolClusterHostId}/interfaces/{vmPoolClusterHostInterfaceId}:
    get:
      tags:
      - VM Pools
      summary: Retrieves a VM Cluster Host Interface
      description: Returns a VM Cluster Host Interface
      operationId: getVMPoolClusterHostInterface
      parameters:
      - name: vmPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmPoolClusterHostId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmPoolClusterHostInterfaceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns a VM Cluster Host Interface
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMPoolHostInterfaces'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - VM Pools
      summary: Updates a VM Cluster Host Interface
      description: Updates a VM Cluster Host Interface
      operationId: updateVMPoolClusterHostInterface
      parameters:
      - name: vmPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmPoolClusterHostId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmPoolClusterHostInterfaceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The VM Pool Cluster Host Interface update object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVMPoolClusterHostInterface'
        required: true
      responses:
        "200":
          description: Returns a VM Cluster Host Interface
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMPoolHostInterfaces'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vm-pools/{vmPoolId}/cluster-hosts/{vmPoolClusterHostId}/vms:
    get:
      tags:
      - VM Pools
      summary: Retrieves a list of VM Cluster Host VMs
      description: Returns a list of VM Cluster Host VMs
      operationId: getVMPoolClusterHostVMs
      parameters:
      - name: vmPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmPoolClusterHostId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns a list of VM Cluster Host VMs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMList'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vm-types:
    get:
      tags:
      - VM Types
      summary: Get all VM Types
      description: Returns list of all VM Types
      operationId: getVMTypes
      parameters: []
      responses:
        "200":
          description: Returns list of all VM Types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMTypeList'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    post:
      tags:
      - VM Types
      summary: Creates a VM Type
      description: Creates a VM Type
      operationId: createVMType
      parameters: []
      requestBody:
        description: The VM Type create object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVMType'
        required: true
      responses:
        "200":
          description: The VM Type successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMType'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vm-types/{vmTypeId}:
    get:
      tags:
      - VM Types
      summary: Get VM Type information
      description: Returns VM Type information
      operationId: getVMType
      parameters:
      - name: vmTypeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns VM Type information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMType'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    delete:
      tags:
      - VM Types
      summary: Deletes a VM Type
      description: Deletes a VM Type
      operationId: deleteVMType
      parameters:
      - name: vmTypeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The VM Type successfully deleted
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - VM Types
      summary: Updates VM Type information
      description: Updates VM Type information
      operationId: updateVMType
      parameters:
      - name: vmTypeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The VM Type update object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVMType'
        required: true
      responses:
        "200":
          description: The VM Type information successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMType'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vm-types/{vmTypeId}/vms:
    get:
      tags:
      - VM Types
      summary: Returns all VMs linked to the VM Type
      description: Returns all VMs linked to the VM Type
      operationId: getVMsByVMType
      parameters:
      - name: vmTypeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returned all VMs linked to the VM Type
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/actions/deploy:
    post:
      tags:
      - Infrastructure
      summary: Deploys the specified infrastructure
      description: Deploys the specified infrastructure
      operationId: deployInfrastructure
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The infrastructure deploy options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InfrastructureDeployOptions'
        required: true
      responses:
        "202":
          description: Deploys the specified infrastructure
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/actions/revert:
    post:
      tags:
      - Infrastructure
      summary: Reverts the specified infrastructure
      description: Reverts the specified infrastructure
      operationId: revertInfrastructure
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "202":
          description: Reverts the specified infrastructure
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures:
    get:
      tags:
      - Infrastructure
      summary: Get all infrastructures
      description: Returns list of all infrastructures
      operationId: getInfrastructures
      parameters:
      - name: accountId
        in: query
        description: The account ID to filter user infrastructures by
        required: false
        style: form
        explode: true
        schema:
          type: number
      responses:
        "200":
          description: Returns list of all infrastructures
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InfrastructureDto'
                x-content-type: application/json
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}:
    get:
      tags:
      - Infrastructure
      summary: Retrieves the specified infrastructure
      description: Retrieves the specified infrastructure
      operationId: getInfrastructure
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Retrieved the specified infrastructure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfrastructureDto'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/servers:
    get:
      tags:
      - Server
      summary: Get a list of Servers
      description: Returns a list of Servers
      operationId: getServers
      parameters: []
      responses:
        "200":
          description: Returns a list of Servers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerList'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    post:
      tags:
      - Server
      summary: Initialize server registration
      description: Initializes server registration process
      operationId: registerServer
      parameters: []
      requestBody:
        description: The server registration information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerRegistrationDto'
        required: true
      responses:
        "200":
          description: Server registration initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerRegistrationResponseDto'
        "202":
          description: Server registration accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerRegistrationResponseDto'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "409":
          description: Conflict
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      - apiKey: []
  /api/v2/servers/{serverId}/actions/re-register:
    post:
      tags:
      - Server
      summary: Re-register a server
      description: Re-registers a server
      operationId: reRegisterServer
      parameters:
      - name: serverId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Server re-registration initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerReRegistrationResponseDto'
        "202":
          description: Server re-registration accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerRegistrationResponseDto'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      - apiKey: []
  /api/v2/servers/{serverId}:
    get:
      tags:
      - Server
      summary: Get Server information
      description: Returns Server information
      operationId: getServerInfo
      parameters:
      - name: serverId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns Server information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/network-equipment/re-provision:
    post:
      tags:
      - Network Equipment
      summary: Re-provision network equipment
      description: Re-provision network equipment
      operationId: reProvisionNetworkEquipment
      parameters: []
      requestBody:
        description: The network equipment re-provision options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkEquipmentReProvisionOptions'
        required: true
      responses:
        "200":
          description: Network equipment re-provision initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkEquipmentReProvisionResponse'
        "202":
          description: Network equipment re-provision accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkEquipmentReProvisionResponse'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error
      security:
      - JWT: []
      - apiKey: []
  /api/v2/storages:
    get:
      tags:
      - Storage
      summary: Get a list of Storages
      description: Returns a list of Storages
      operationId: getStorages
      parameters: []
      responses:
        "200":
          description: Returns a list of Storages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageList'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    post:
      tags:
      - Storage
      summary: Creates a Storage
      description: Creates a Storage
      operationId: createStorage
      parameters: []
      requestBody:
        description: The Storage create object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStorage'
        required: true
      responses:
        "200":
          description: The Storage successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageRegistrationResponse'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/storages/{storageId}:
    get:
      tags:
      - Storage
      summary: Retrieves a Storage
      description: Retrieves a Storage
      operationId: getStorage
      parameters:
      - name: storageId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The Storage successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageRegistrationResponse'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - Storage
      summary: Updates a Storage
      description: Updates a Storage
      operationId: updateStorage
      parameters:
      - name: storageId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The Storage update object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchStorage'
        required: true
      responses:
        "200":
          description: The Storage successfully updated
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/vm-instance-groups:
    get:
      tags:
      - VM Instance Group
      summary: Get all VM Instance Groups
      description: Returns list of all VM Instance Groups
      operationId: getVMInstanceGroups
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns list of all VM Instance Groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VMInstanceGroup'
                x-content-type: application/json
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    post:
      tags:
      - VM Instance Group
      summary: Creates a VM Instance Group
      description: Creates a VM Instance Group
      operationId: createVMInstanceGroup
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The VM Instance Group create object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVMInstanceGroup'
        required: true
      responses:
        "200":
          description: The VM Instance Group successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMInstanceGroup'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/vm-instance-groups/{vmInstanceGroupId}:
    get:
      tags:
      - VM Instance Group
      summary: Get VM Instance Group information
      description: Returns VM Instance Group information
      operationId: getVMInstanceGroup
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceGroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns VM Instance Group information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMInstanceGroup'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    delete:
      tags:
      - VM Instance Group
      summary: Deletes a VM Instance Group
      description: Deletes a VM Instance Group
      operationId: deleteVMInstanceGroup
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceGroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The VM Instance Group successfully deleted
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - VM Instance Group
      summary: Updates VM Instance Group information
      description: Updates VM Instance Group information
      operationId: updateVMInstanceGroup
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceGroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The VM Instance Group update object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVMInstanceGroup'
        required: true
      responses:
        "200":
          description: The VM Instance Group information successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMInstanceGroup'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/vm-instance-groups/{vmInstanceGroupId}/vm-instances:
    get:
      tags:
      - VM Instance Group
      summary: Get the VM Instances of VM Instance Group
      description: Returns the VM Instances of VM Instance Group
      operationId: getVMInstanceGroupVMInstances
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceGroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns the VM Instances of VM Instance Group
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/VMInstance'
                x-content-type: application/json
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/vm-instance-groups/{vmInstanceGroupId}/actions/apply-type/{vmTypeId}:
    post:
      tags:
      - VM Instance Group
      summary: Applies a VM Type to a VM Instance Group
      description: Applies a VM Type to a VM Instance Group
      operationId: applyVMTypeOnVMInstanceGroup
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceGroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmTypeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: VM Type applied on VM Instance Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMInstanceGroup'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/vm-instance-groups/{vmInstanceGroupId}/interfaces:
    post:
      tags:
      - VM Instance Group
      summary: Creates a new Virtual Interface for the VM Instance Group
      description: Creates a new Virtual Interface for the VM Instance Group
      operationId: createVMInterfaceOnVMInstanceGroup
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceGroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVMInstanceGroupInterface'
        required: true
      responses:
        "200":
          description: Virtual Interface created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMInstanceGroupInterface'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/vm-instance-groups/{vmInstanceGroupId}/network/{networkId}:
    patch:
      tags:
      - VM Instance Group
      summary: Applies the given Network Profile to the specified VM Instance Group
        Network
      description: Applies the given Network Profile to the specified VM Instance
        Group Network
      operationId: updateNetworkProfileOnVMInstanceGroupNetwork
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceGroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: networkId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The VM Instance Group Network update object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVMInstanceGroupNetwork'
        required: true
      responses:
        "200":
          description: Network profile successfully applied to the given VM Instance
            Group Network.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMInstanceGroup'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/vm-instances:
    post:
      tags:
      - VM Instance
      summary: Creates a VM Instance
      description: Creates a VM Instance
      operationId: createVMInstance
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The VM Instance create object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVMInstance'
        required: true
      responses:
        "200":
          description: The VM Instance successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMInstance'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/vm-instances/{vmInstanceId}:
    get:
      tags:
      - VM Instance
      summary: Get VM Instance information
      description: Returns VM Instance information
      operationId: getVMInstance
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns VM Instance information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMInstance'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    delete:
      tags:
      - VM Instance
      summary: Deletes a VM Instance
      description: Deletes a VM Instance
      operationId: deleteVMInstance
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The VM Instance successfully deleted
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - VM Instance
      summary: Updates VM Instance information
      description: Updates VM Instance information
      operationId: updateVMInstance
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The VM Instance update object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVMInstance'
        required: true
      responses:
        "200":
          description: The VM Instance information successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMInstance'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/vm-instances/{vmInstanceId}/actions/apply-type/{vmTypeId}:
    post:
      tags:
      - VM Instance
      summary: Applies a VM Type to a VM Instance
      description: Applies a VM Type to a VM Instance
      operationId: applyVMTypeOnVMInstance
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmTypeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: VM Type applied on VM Instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMInstance'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/vm-instances/{vmInstanceId}/power-status:
    get:
      tags:
      - VM Instance
      summary: Retrieves the power status of the VM Instance
      description: Retrieves the power status of the VM Instance
      operationId: getVMInstancePowerStatus
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The VM Instance power status
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/vm-instances/{vmInstanceId}/start:
    post:
      tags:
      - VM Instance
      summary: Starts the VM Instance
      description: Starts the VM Instance
      operationId: startVMInstance
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The VM Instance was successfully started
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/vm-instances/{vmInstanceId}/shutdown:
    post:
      tags:
      - VM Instance
      summary: Shuts down the VM Instance
      description: Shuts down the VM Instance
      operationId: shutdownVMInstance
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The VM Instance was successfully shut down
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/vm-instances/{vmInstanceId}/reboot:
    post:
      tags:
      - VM Instance
      summary: Reboots the VM Instance
      description: Reboots the VM Instance
      operationId: rebootVMInstance
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: vmInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The VM Instance was successfully rebooted
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/networks:
    get:
      tags:
      - Network
      summary: Retrieves all networks on the infrastructure
      description: Retrieves all networks on the infrastructure
      operationId: getInfrastructureNetworks
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Networks successfully retrieved.
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
    post:
      tags:
      - Network
      summary: Creates a new LAN network on the infrastructure
      description: Creates a new LAN network on the infrastructure
      operationId: createInfrastructureNetwork
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The Network create object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNetwork'
        required: true
      responses:
        "200":
          description: The Network successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/networks/{networkId}:
    get:
      tags:
      - Network
      summary: Gets the specified network from the infrastructure
      description: Gets the specified network from the infrastructure
      operationId: getInfrastructureNetwork
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: networkId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Network information successfully retrieved.
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
    delete:
      tags:
      - Network
      summary: Deletes a network from the infrastructure
      description: Deletes a network from the infrastructure
      operationId: deleteInfrastructureNetwork
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: networkId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Network successfully deleted.
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/file-shares/{fileShareId}:
    get:
      tags:
      - File Share
      summary: Get File Share information
      description: Returns File Share information
      operationId: getFileShare
      parameters:
      - name: fileShareId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns File Share information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileShareExtendedInfo'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/file-shares:
    get:
      tags:
      - File Share
      summary: Get all File Shares
      description: Returns list of all File Shares
      operationId: getInfrastructureFileShares
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns list of all File Shares
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileShare'
                x-content-type: application/json
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    post:
      tags:
      - File Share
      summary: Creates a File Share
      description: Creates a File Share
      operationId: createInfrastructureFileShare
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The File Share create object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileShare'
        required: true
      responses:
        "200":
          description: The File Share successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileShare'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/storages/{storageId}/file-shares:
    get:
      tags:
      - Storage
      summary: Get all File Shares linked to the specified storage
      description: Returns list of all File Shares linked to the specified Storage
      operationId: getStorageFileShares
      parameters:
      - name: storageId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns list of all File Shares linked to the specified Storage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileShareList'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/file-shares/{fileShareId}:
    get:
      tags:
      - File Share
      summary: Get File Share information
      description: Returns File Share information
      operationId: getInfrastructureFileShare
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: fileShareId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns File Share information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileShare'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    delete:
      tags:
      - File Share
      summary: Deletes a File Share
      description: Deletes a File Share
      operationId: deleteFileShare
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: fileShareId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The File Share successfully deleted
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - File Share
      summary: Updates File Share information
      description: Updates File Share information
      operationId: updateFileShare
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: fileShareId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The File Share update object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFileShare'
        required: true
      responses:
        "200":
          description: The File Share information successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileShare'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/file-shares/{fileShareId}/hosts:
    get:
      tags:
      - File Share
      summary: Get the Hosts of File Share
      description: Returns the Hosts of File Share
      operationId: getFileShareHosts
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: fileShareId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns the Hosts of File Share
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileShareHosts'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/file-shares/{fileShareId}/actions/start:
    post:
      tags:
      - File Share
      summary: Starts a File Share
      description: Starts a File Share
      operationId: startFileShare
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: fileShareId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The File Share successfully scheduled to start
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/file-shares/{fileShareId}/actions/stop:
    post:
      tags:
      - File Share
      summary: Stops a File Share
      description: Stops a File Share
      operationId: stopFileShare
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: fileShareId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The File Share successfully scheduled to stop
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/file-shares/{fileShareId}/actions/modify-instance-array-hosts-bulk:
    post:
      tags:
      - File Share
      summary: Updates Instance Array Hosts on the File Share
      description: Updates Instance Array Hosts on the File Share
      operationId: updateFileShareInstanceArrayHostsBulk
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: fileShareId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The File Share Instance Array Hosts update object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileShareHostsModifyBulk'
        required: true
      responses:
        "200":
          description: The File Share information successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileShareHosts'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/buckets/{bucketId}:
    get:
      tags:
      - Bucket
      summary: Get Bucket information
      description: Returns Bucket information
      operationId: getBucket
      parameters:
      - name: bucketId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns Bucket information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketExtendedInfo'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/buckets:
    get:
      tags:
      - Bucket
      summary: Get all Buckets
      description: Returns list of all Buckets
      operationId: getInfrastructureBuckets
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns list of all Buckets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bucket'
                x-content-type: application/json
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    post:
      tags:
      - Bucket
      summary: Creates a Bucket
      description: Creates a Bucket
      operationId: createInfrastructureBucket
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The Bucket create object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBucket'
        required: true
      responses:
        "200":
          description: The Bucket successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/storages/{storageId}/buckets:
    get:
      tags:
      - Storage
      summary: Get all Buckets linked to the specified storage
      description: Returns list of all Buckets linked to the specified Storage
      operationId: getStorageBuckets
      parameters:
      - name: storageId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns list of all Buckets linked to the specified Storage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketList'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/buckets/{bucketId}:
    get:
      tags:
      - Bucket
      summary: Get Bucket information
      description: Returns Bucket information
      operationId: getInfrastructureBucket
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: bucketId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns Bucket information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
    delete:
      tags:
      - Bucket
      summary: Deletes a Bucket
      description: Deletes a Bucket
      operationId: deleteBucket
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: bucketId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The Bucket successfully deleted
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - Bucket
      summary: Updates Bucket information
      description: Updates Bucket information
      operationId: updateBucket
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: bucketId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The Bucket update object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBucket'
        required: true
      responses:
        "200":
          description: The Bucket information successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/buckets/{bucketId}/actions/start:
    post:
      tags:
      - Bucket
      summary: Starts a Bucket
      description: Starts a Bucket
      operationId: startBucket
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: bucketId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The Bucket successfully scheduled to start
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/buckets/{bucketId}/actions/stop:
    post:
      tags:
      - Bucket
      summary: Stops a Bucket
      description: Stops a Bucket
      operationId: stopBucket
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      - name: bucketId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The Bucket successfully scheduled to stop
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vms/{vmId}/power-status:
    get:
      tags:
      - VMs
      summary: Retrieves the power status of the VM
      description: Retrieves the power status of the VM
      operationId: getVMPowerStatus
      parameters:
      - name: vmId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The VM power status was successfully retrieved
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vms/{vmId}/start:
    post:
      tags:
      - VMs
      summary: Starts the VM
      description: Starts the VM
      operationId: startVM
      parameters:
      - name: vmId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The VM was successfully started
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vms/{vmId}/shutdown:
    post:
      tags:
      - VMs
      summary: Shuts down the VM
      description: Shuts down the VM
      operationId: shutdownVM
      parameters:
      - name: vmId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The VM was successfully shut down
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vms/{vmId}/reboot:
    post:
      tags:
      - VMs
      summary: Reboots the VM
      description: Reboots the VM
      operationId: rebootVM
      parameters:
      - name: vmId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The VM was successfully rebooted
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "409":
          description: Conflict
      security:
      - JWT: []
      - apiKey: []
  /api/v2/vms/{vmId}/remote-console-info:
    get:
      tags:
      - VMs
      summary: Get Remote Console information
      description: Returns Remote Console information
      operationId: getVMRemoteConsoleInfo
      parameters:
      - name: vmId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns Remote Console information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RemoteConsoleInfoDto'
                x-content-type: application/json
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - JWT: []
      - apiKey: []
  /api/v2/ai/generate:
    post:
      tags:
      - AI
      summary: Request from AI a response for the given input
      description: Returns response with potential actions to execute
      operationId: generateEliResponse
      parameters: []
      requestBody:
        description: The AI generate request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIGenerateRequestDto'
        required: true
      responses:
        "200":
          description: Returns response for the AI
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIGenerateResponseDto'
        "401":
          description: Unauthorized
      security:
      - JWT: []
      - apiKey: []
  /api/v2/servers/{serverId}/vnc-info:
    get:
      tags:
      - Server
      summary: Get VNC information
      description: Returns VNC information
      operationId: getServerVNCInfo
      parameters:
      - name: serverId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns VNC information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServerVNCInfoDto'
                x-content-type: application/json
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - JWT: []
      - apiKey: []
  /api/v2/servers/{serverId}/remote-console-info:
    get:
      tags:
      - Server
      summary: Get Remote Console information
      description: Returns Remote Console information
      operationId: getServerRemoteConsoleInfo
      parameters:
      - name: serverId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Returns Remote Console information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RemoteConsoleInfoDto'
                x-content-type: application/json
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - JWT: []
      - apiKey: []
  /api/v2/servers/{serverId}/actions/factory-reset:
    post:
      tags:
      - Server
      summary: Resets a server to factory defaults
      description: Resets a server to factory defaults
      operationId: resetServerToFactoryDefaults
      parameters:
      - name: serverId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "202":
          description: Resets a server to factory defaults
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/servers/{serverId}/actions/syslog-subscribe:
    post:
      tags:
      - Server
      summary: Enables remote syslog for a server
      description: Enables remote syslog for a server
      operationId: enableServerSyslog
      parameters:
      - name: serverId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "204":
          description: Enables remote syslog for a server
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/servers/{serverId}/actions/get-power:
    post:
      tags:
      - Server
      summary: Gets the power state of a server
      description: Gets the power state of a server
      operationId: getServerPowerState
      parameters:
      - name: serverId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Gets the power state of a server
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/servers/{serverId}/actions/set-power:
    post:
      tags:
      - Server
      summary: Sets the power state of a server
      description: Sets the power state of a server
      operationId: setServerPowerState
      parameters:
      - name: serverId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerPowerSetDto'
        required: true
      responses:
        "204":
          description: Sets the power state of a server
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/network-devices/{networkDeviceId}/ports:
    get:
      tags:
      - Network Devices
      summary: Get all ports for network device
      operationId: getNetworkDevicePorts
      parameters:
      - name: networkDeviceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: Ports found
        "401":
          description: Unauthorized
        "404":
          description: No ports found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/network-devices/{networkDeviceId}/actions/set-port-status:
    post:
      tags:
      - Network Devices
      summary: Set port status
      operationId: setNetworkDevicePortStatus
      parameters:
      - name: networkDeviceId
        in: path
        description: Network device ID
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: Port status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkDevicePortStatusDto'
        required: true
      responses:
        "200":
          description: Port status updated
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JWT: []
      - apiKey: []
  /api/v2/network-devices/{networkDeviceId}/actions/reset:
    post:
      tags:
      - Network Devices
      summary: Resets a network device to default state
      description: Resets a network device to default state and destroy all configurations
      operationId: resetNetworkDevice
      parameters:
      - name: networkDeviceId
        in: path
        description: Network device ID
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "204":
          description: Network device reset to default state
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JWT: []
      - apiKey: []
  /api/v2/network-devices/{networkDeviceId}/actions/syslog-subscribe:
    post:
      tags:
      - Network Devices
      summary: Enables remote syslog for a network device
      description: Enables remote syslog for a network device
      operationId: enableNetworkDeviceSyslog
      parameters:
      - name: networkDeviceId
        in: path
        description: Network device ID
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "204":
          description: Enables remote syslog for a network device
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JWT: []
      - apiKey: []
  /api/v2/network-devices/{networkDeviceId}/actions/change-status:
    patch:
      tags:
      - Network Devices
      summary: Change status of a network device
      description: Change status of a network device
      operationId: changeNetworkDeviceStatus
      parameters:
      - name: networkDeviceId
        in: path
        description: Network device ID
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: Network device status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkDeviceStatusDto'
        required: true
      responses:
        "200":
          description: Network device status updated
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
      - JWT: []
      - apiKey: []
  /api/v2/network-devices/{networkDeviceId}/discover:
    post:
      tags:
      - Network Devices
      summary: "Discover network device interfaces, hardware and software configuration"
      description: "Discover network device interfaces, hardware and software configuration\
        \ and return them and/or persist them"
      operationId: discoverNetworkDevice
      parameters:
      - name: networkDeviceId
        in: path
        description: Network device identifier
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoveryQueryDto'
        required: true
      responses:
        "200":
          description: Network device discovered and the data
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JWT: []
      - apiKey: []
  /api/v2/extensions:
    get:
      tags:
      - Extension
      summary: List available extensions
      description: Returns list of the available extensions
      operationId: getExtensions
      parameters:
      - name: filter
        in: query
        description: "Filter extension by status, name, label and description"
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "status=draft,name=abc,label=lbl,description=desc"
      responses:
        "200":
          description: The list of the available extensions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionListDto'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      - apiKey: []
    post:
      tags:
      - Extension
      summary: Create extension
      description: Returns details of the new extension
      operationId: createExtension
      parameters: []
      requestBody:
        description: The extension details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExtensionDto'
        required: true
      responses:
        "201":
          description: The details of the created extension
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionDto'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      - apiKey: []
  /api/v2/extensions/{extensionId}:
    get:
      tags:
      - Extension
      summary: Get details for an extension
      description: Returns details of the specified extension
      operationId: getExtension
      parameters:
      - name: extensionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The details of the specified extension
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionDto'
        "401":
          description: Unauthorized
        "404":
          description: Extension not found
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - Extension
      summary: Update extension
      description: Returns details of the updated extension
      operationId: updateExtension
      parameters:
      - name: extensionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The extension details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExtensionDto'
        required: true
      responses:
        "200":
          description: The details of the updated extension
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionDto'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      - apiKey: []
  /api/v2/extensions/{extensionId}/actions/publish:
    post:
      tags:
      - Extension
      summary: Publish draft extension
      description: Publishes draft extension.
      operationId: publishExtension
      parameters:
      - name: extensionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The extension was published successfully
        "401":
          description: Unauthorized
        "404":
          description: Extension not found
        "409":
          description: The extension state does not allow this operation.
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      - apiKey: []
  /api/v2/extensions/{extensionId}/actions/archive:
    post:
      tags:
      - Extension
      summary: Archive published extension
      description: Archives published extension.
      operationId: archiveExtension
      parameters:
      - name: extensionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The extension was archived successfully
        "401":
          description: Unauthorized
        "404":
          description: Extension not found
        "409":
          description: The extension state does not allow this operation.
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      - apiKey: []
  /api/v2/infrastructures/{infrastructureId}/extension-instances:
    post:
      tags:
      - Extension Instance
      summary: Add extension instance to an infrastructure
      description: Adds extension instance to the specified infrastructure. Note that
        a infrastructure deploy is needed for the changes to take effect.
      operationId: createExtensionInstance
      parameters:
      - name: infrastructureId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The extension instance to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExtensionInstanceDto'
        required: true
      responses:
        "201":
          description: The details of created extension instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionInstanceDto'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Infrastructure not found
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      - apiKey: []
  /api/v2/extension-instances:
    get:
      tags:
      - Extension Instance
      summary: Get extension instances list
      description: Returns list of extension instances
      operationId: getExtensionInstances
      parameters:
      - name: page
        in: query
        description: "Page number used in pagination, starts with `0`"
        required: false
        style: form
        explode: true
        schema:
          title: Page
          maximum: 10000
          exclusiveMaximum: true
          minimum: 0
          exclusiveMinimum: false
          type: integer
          format: int32
          default: 0
      - name: limit
        in: query
        description: "Number of items per page, default value `20`"
        required: false
        style: form
        explode: true
        schema:
          title: Limit
          maximum: 100
          exclusiveMaximum: false
          minimum: 1
          exclusiveMinimum: false
          type: integer
          format: int32
      - name: sortBy
        in: query
        description: "Sort by field and direction, example: `id:ASC`"
        required: false
        style: form
        explode: true
        schema:
          title: SortBy
          type: string
      - name: filter
        in: query
        description: "Filter expression for a field, see [nestjs paginate documentation](https://github.com/ppetzold/nestjs-paginate#filters).<br\
          \ /> <br /> Use `\"filter.*\"` as a way to specify the field to filter on,\
          \ see the example bellow: <br /> <br /> "
        required: false
        style: form
        explode: true
        schema:
          title: Filter
          type: object
      responses:
        "200":
          description: The list of extension instances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionInstanceListDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Infrastructure not found
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      - apiKey: []
  /api/v2/extension-instances/{extensionInstanceId}:
    get:
      tags:
      - Extension Instance
      summary: Get extension instance details
      description: Returns the details of the specified extension instance
      operationId: getExtensionInstance
      parameters:
      - name: extensionInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The details of the specified extension instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionInstanceDto'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Extension instance not found
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      - apiKey: []
    delete:
      tags:
      - Extension Instance
      summary: Delete extension instance
      description: Deletes the specified extension instance
      operationId: deleteExtensionInstance
      parameters:
      - name: extensionInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "204":
          description: The specified extension instance was successfully deleted
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Extension instance not found
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      - apiKey: []
    patch:
      tags:
      - Extension Instance
      summary: Update extension instance configuration
      description: Updates the specified extension instance
      operationId: updateExtensionInstance
      parameters:
      - name: extensionInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        description: The extension instance changes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExtensionInstanceDto'
        required: true
      responses:
        "200":
          description: The specified extension instance was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionInstanceDto'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Extension instance not found
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      - apiKey: []
  /api/v2/config:
    get:
      tags:
      - Configuration
      summary: Get configuration
      description: Returns a configuration object
      operationId: getConfiguration
      parameters:
      - name: filter
        in: query
        description: Filter to be applied.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Returns a configuration object
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - JWT: []
      - apiKey: []
  /api/v2/version:
    get:
      tags:
      - System
      summary: Get MetalSoft system version
      description: Returns the MetalSoft system version
      operationId: getVersion
      parameters: []
      responses:
        "200":
          description: Returns the MetalSoft system version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        "401":
          description: Unauthorized
      security:
      - JWT: []
      - apiKey: []
components:
  schemas:
    AccountAddressDto:
      type: object
      properties:
        addressLine1:
          type: string
          description: The first line of the account address
        addressLine2:
          type: string
          description: The second line of the account address
        postalCode:
          type: string
          description: The postal code of the account address
        state:
          type: string
          description: The state of the account address
        country:
          type: string
          description: The country of the account address
      example:
        country: country
        postalCode: postalCode
        addressLine1: addressLine1
        addressLine2: addressLine2
        state: state
    AccountLimits:
      required:
      - user_resource_server_type_name_to_max_count
      - wan_subnet_prefix_size_to_max_count
      type: object
      properties:
        user_resource_server_type_name_to_max_count:
          type: object
        wan_subnet_prefix_size_to_max_count:
          type: object
      example:
        user_resource_server_type_name_to_max_count: {}
        wan_subnet_prefix_size_to_max_count: {}
    AccountDto:
      required:
      - id
      - limits
      - name
      type: object
      properties:
        id:
          type: number
          description: Account ID
          example: 1
        parentAccountId:
          type: number
          description: The ID of the parent account
        name:
          type: string
          description: The name of the account
        code:
          type: string
          description: The code of the account
        fiscalNumber:
          type: string
          description: The fiscal number of the account
        address:
          $ref: '#/components/schemas/AccountAddressDto'
        primaryContactId:
          type: number
          description: The user ID of the primary contact
        secondaryContactId:
          type: number
          description: The user ID of the secondary contact
        archived:
          type: number
          description: Whether the account is archived
        limits:
          $ref: '#/components/schemas/AccountLimits'
      example:
        parentAccountId: 0.8008281904610115
        archived: 5.962133916683182
        code: code
        address:
          country: country
          postalCode: postalCode
          addressLine1: addressLine1
          addressLine2: addressLine2
          state: state
        secondaryContactId: 1.4658129805029452
        name: name
        id: 1
        fiscalNumber: fiscalNumber
        limits:
          user_resource_server_type_name_to_max_count: {}
          wan_subnet_prefix_size_to_max_count: {}
        primaryContactId: 6.027456183070403
    CreateAccountDto:
      type: object
      properties:
        parentAccountId:
          type: number
          description: The ID of the parent account
        name:
          type: string
          description: The name of the account
        code:
          type: string
          description: The code of the account
        fiscalNumber:
          type: string
          description: The fiscal number of the account
        address:
          $ref: '#/components/schemas/AccountAddressDto'
    UpdateAccountDto:
      type: object
      properties:
        parentAccountId:
          type: number
          description: The ID of the parent account
        name:
          type: string
          description: The name of the account
        code:
          type: string
          description: The code of the account
        fiscalNumber:
          type: string
          description: The fiscal number of the account
        address:
          $ref: '#/components/schemas/AccountAddressDto'
        primaryContactId:
          type: number
          description: The user ID of the primary contact
        secondaryContactId:
          type: number
          description: The user ID of the secondary contact
    AccountLimitsDto:
      type: object
      properties:
        userResourceServerTypeNameToMaxCount:
          type: object
        wanSubnetPrefixSizeToMaxCount:
          type: object
      example:
        wanSubnetPrefixSizeToMaxCount: {}
        userResourceServerTypeNameToMaxCount: {}
    UserLimits:
      required:
      - allow_network_profiles
      - allow_vlan_overrides
      - allowed_network_profiles
      - bucket_max_size_gb
      - bucket_min_size_gb
      - container_array_containers_max_count
      - container_array_containers_min_count
      - container_array_drive_arrays_max_count
      - container_array_drive_arrays_min_count
      - container_array_secrets_max_count
      - container_platform_container_array_max_count
      - drive_array_drives_max_count
      - drive_array_drives_min_count
      - drive_max_size_mbytes
      - drive_min_size_mbytes
      - enable_custom_raid_configuration
      - enable_custom_subnets
      - file_share_max_size_gb
      - file_share_min_size_gb
      - infrastructure_active_max_count
      - infrastructure_bucket_max_count
      - infrastructure_cluster_max_count
      - infrastructure_cluster_mysql_allowed
      - infrastructure_container_cluster_kafka_allowed
      - infrastructure_container_cluster_max_count
      - infrastructure_container_cluster_postgresql_allowed
      - infrastructure_container_cluster_spark_array_allowed
      - infrastructure_container_cluster_sparksql_allowed
      - infrastructure_container_cluster_streamsets_allowed
      - infrastructure_container_cluster_zookeeper_allowed
      - infrastructure_container_cluster_zoomdata_allowed
      - infrastructure_container_platform_max_count
      - infrastructure_data_lake_enabled
      - infrastructure_data_lake_max_count
      - infrastructure_deleted_max_count
      - infrastructure_drive_array_max_count
      - infrastructure_file_share_max_count
      - infrastructure_inactive_max_count
      - infrastructure_instance_array_max_count
      - infrastructure_lan_max_count
      - infrastructure_san_max_count
      - infrastructure_shared_drive_max_count
      - infrastructure_vm_instance_group_max_count
      - infrastructure_volume_template_experimental_allowed
      - infrastructure_wan_max_count
      - instance_array_instances_max_count
      - instance_array_instances_min_count
      - owner_is_billable
      - server_type_reservation_max_count
      - server_type_reservation_max_quantity
      - shared_drive_max_size_mbytes
      - shared_drive_min_size_mbytes
      - show_diagram_app_cluster_type_cloudera
      - show_diagram_app_cluster_type_couchbase
      - show_diagram_app_cluster_type_datameer
      - show_diagram_app_cluster_type_datastax
      - show_diagram_app_cluster_type_elasticsearch
      - show_diagram_app_cluster_type_exasol
      - show_diagram_app_cluster_type_hortonworks
      - show_diagram_app_cluster_type_kubernetes
      - show_diagram_app_cluster_type_kubernetes_eksa
      - show_diagram_app_cluster_type_mapr
      - show_diagram_app_cluster_type_mesos
      - show_diagram_app_cluster_type_mysql_percona
      - show_diagram_app_cluster_type_splunk
      - show_diagram_app_cluster_type_vmware_vcf
      - show_diagram_app_cluster_type_vmware_vsphere
      - show_diagram_apps_global
      - show_diagram_vm_instance_groups
      - show_eli_chat_bot
      - show_experimental_pages
      - show_legacy_pages
      - show_operating_system_images_tab
      - show_stack_trace
      - show_template_assets_view
      - storage_types
      - threshold_max_count
      - user_resource_iscsi_storage_space_max_gbytes
      - user_resource_server_type_name_to_max_count
      - user_resource_servers_max_count
      - user_ssh_keys_count_max
      - vm_instance_group_vm_instances_max_count
      - vm_instance_max_disk_size_mbytes
      - wan_subnet_ipv4_max_count
      - wan_subnet_ipv6_max_count
      - wan_subnet_prefix_size_to_max_count
      type: object
      properties:
        container_array_containers_max_count:
          type: number
        container_array_containers_min_count:
          type: number
        container_array_drive_arrays_max_count:
          type: number
        container_array_drive_arrays_min_count:
          type: number
        container_array_secrets_max_count:
          type: number
        container_platform_container_array_max_count:
          type: number
        drive_array_drives_max_count:
          type: number
        drive_array_drives_min_count:
          type: number
        drive_max_size_mbytes:
          type: number
        drive_min_size_mbytes:
          type: number
        infrastructure_active_max_count:
          type: number
        infrastructure_cluster_max_count:
          type: number
        infrastructure_cluster_mysql_allowed:
          type: boolean
        infrastructure_container_cluster_kafka_allowed:
          type: boolean
        infrastructure_container_cluster_max_count:
          type: number
        infrastructure_container_cluster_postgresql_allowed:
          type: boolean
        infrastructure_container_cluster_spark_array_allowed:
          type: boolean
        infrastructure_container_cluster_sparksql_allowed:
          type: boolean
        infrastructure_container_cluster_streamsets_allowed:
          type: boolean
        infrastructure_container_cluster_zookeeper_allowed:
          type: boolean
        infrastructure_container_cluster_zoomdata_allowed:
          type: boolean
        infrastructure_container_platform_max_count:
          type: number
        infrastructure_data_lake_enabled:
          type: boolean
        infrastructure_data_lake_max_count:
          type: number
        infrastructure_deleted_max_count:
          type: number
        infrastructure_drive_array_max_count:
          type: number
        infrastructure_inactive_max_count:
          type: number
        infrastructure_instance_array_max_count:
          type: number
        infrastructure_lan_max_count:
          type: number
        infrastructure_san_max_count:
          type: number
        infrastructure_shared_drive_max_count:
          type: number
        infrastructure_volume_template_experimental_allowed:
          type: boolean
        infrastructure_wan_max_count:
          type: number
        instance_array_instances_max_count:
          type: number
        instance_array_instances_min_count:
          type: number
        infrastructure_vm_instance_group_max_count:
          type: number
        vm_instance_group_vm_instances_max_count:
          type: number
        vm_instance_max_disk_size_mbytes:
          type: number
        owner_is_billable:
          type: boolean
        server_type_reservation_max_count:
          type: number
        server_type_reservation_max_quantity:
          type: number
        shared_drive_max_size_mbytes:
          type: number
        shared_drive_min_size_mbytes:
          type: number
        infrastructure_file_share_max_count:
          type: number
        file_share_min_size_gb:
          type: number
        file_share_max_size_gb:
          type: number
        infrastructure_bucket_max_count:
          type: number
        bucket_min_size_gb:
          type: number
        bucket_max_size_gb:
          type: number
        allow_vlan_overrides:
          type: boolean
        allow_network_profiles:
          type: boolean
        show_operating_system_images_tab:
          type: boolean
        show_template_assets_view:
          type: boolean
        storage_types:
          type: object
        threshold_max_count:
          type: number
        user_resource_iscsi_storage_space_max_gbytes:
          type: number
        user_resource_servers_max_count:
          type: number
        user_resource_server_type_name_to_max_count:
          type: object
        user_ssh_keys_count_max:
          type: number
        wan_subnet_ipv4_max_count:
          type: number
        wan_subnet_ipv6_max_count:
          type: number
        wan_subnet_prefix_size_to_max_count:
          type: object
        show_legacy_pages:
          type: boolean
        show_experimental_pages:
          type: boolean
        show_diagram_apps_global:
          type: boolean
        show_diagram_app_cluster_type_cloudera:
          type: boolean
        show_diagram_app_cluster_type_couchbase:
          type: boolean
        show_diagram_app_cluster_type_datameer:
          type: boolean
        show_diagram_app_cluster_type_datastax:
          type: boolean
        show_diagram_app_cluster_type_elasticsearch:
          type: boolean
        show_diagram_app_cluster_type_exasol:
          type: boolean
        show_diagram_app_cluster_type_hortonworks:
          type: boolean
        show_diagram_app_cluster_type_kubernetes:
          type: boolean
        show_diagram_app_cluster_type_mapr:
          type: boolean
        show_diagram_app_cluster_type_mesos:
          type: boolean
        show_diagram_app_cluster_type_mysql_percona:
          type: boolean
        show_diagram_app_cluster_type_splunk:
          type: boolean
        show_diagram_app_cluster_type_vmware_vsphere:
          type: boolean
        show_diagram_app_cluster_type_vmware_vcf:
          type: boolean
        show_diagram_app_cluster_type_kubernetes_eksa:
          type: boolean
        show_diagram_vm_instance_groups:
          type: boolean
        show_eli_chat_bot:
          type: boolean
        enable_custom_raid_configuration:
          type: boolean
        enable_custom_subnets:
          type: boolean
        show_stack_trace:
          type: boolean
        allowed_network_profiles:
          type: object
      example:
        allow_network_profiles: true
        wan_subnet_ipv4_max_count: 0.2025324113236393
        infrastructure_container_cluster_spark_array_allowed: true
        allowed_network_profiles: {}
        infrastructure_container_cluster_zookeeper_allowed: true
        infrastructure_container_platform_max_count: 9.369310271410669
        show_diagram_app_cluster_type_mapr: true
        show_diagram_app_cluster_type_cloudera: true
        infrastructure_vm_instance_group_max_count: 6.704019297950036
        show_diagram_app_cluster_type_datameer: true
        infrastructure_container_cluster_postgresql_allowed: true
        drive_array_drives_max_count: 1.4894159098541704
        infrastructure_inactive_max_count: 6.438423552598547
        file_share_max_size_gb: 8.969578798196912
        vm_instance_group_vm_instances_max_count: 3.353193347011243
        show_stack_trace: true
        bucket_max_size_gb: 3.0576100241049344
        infrastructure_active_max_count: 4.965218492984954
        show_diagram_app_cluster_type_datastax: true
        infrastructure_container_cluster_sparksql_allowed: true
        infrastructure_bucket_max_count: 7.740351818741173
        enable_custom_subnets: true
        infrastructure_file_share_max_count: 0.10263654006109402
        user_resource_servers_max_count: 3.2588565619047607
        infrastructure_cluster_max_count: 5.025004791520295
        infrastructure_container_cluster_kafka_allowed: true
        show_operating_system_images_tab: true
        drive_array_drives_min_count: 6.84685269835264
        infrastructure_shared_drive_max_count: 2.8841621266687802
        enable_custom_raid_configuration: true
        show_diagram_app_cluster_type_splunk: true
        show_diagram_app_cluster_type_couchbase: true
        show_diagram_vm_instance_groups: true
        infrastructure_container_cluster_zoomdata_allowed: true
        infrastructure_wan_max_count: 6.778324963048013
        infrastructure_instance_array_max_count: 3.5571952270680973
        show_diagram_app_cluster_type_vmware_vsphere: true
        show_diagram_app_cluster_type_exasol: true
        show_diagram_app_cluster_type_elasticsearch: true
        infrastructure_container_cluster_streamsets_allowed: true
        infrastructure_san_max_count: 1.284659006116532
        file_share_min_size_gb: 4.652396432933246
        shared_drive_max_size_mbytes: 7.058770351582356
        show_legacy_pages: true
        infrastructure_volume_template_experimental_allowed: true
        infrastructure_cluster_mysql_allowed: true
        infrastructure_container_cluster_max_count: 9.965781217890562
        allow_vlan_overrides: true
        show_diagram_app_cluster_type_mesos: true
        vm_instance_max_disk_size_mbytes: 3.0937452626664474
        wan_subnet_ipv6_max_count: 6.628464275087742
        bucket_min_size_gb: 3.0205796992916243
        container_array_containers_max_count: 3.616076749251911
        drive_max_size_mbytes: 7.457744773683766
        infrastructure_drive_array_max_count: 9.018348186070783
        show_diagram_app_cluster_type_hortonworks: true
        container_array_secrets_max_count: 1.2315135367772556
        show_diagram_app_cluster_type_kubernetes_eksa: true
        infrastructure_data_lake_enabled: true
        infrastructure_lan_max_count: 6.965117697638846
        server_type_reservation_max_quantity: 0.8851374739011653
        show_template_assets_view: true
        instance_array_instances_min_count: 5.944895607614016
        show_diagram_app_cluster_type_mysql_percona: true
        user_resource_server_type_name_to_max_count: {}
        instance_array_instances_max_count: 6.878052220127876
        show_experimental_pages: true
        container_array_containers_min_count: 2.027123023002322
        server_type_reservation_max_count: 7.143538047012306
        drive_min_size_mbytes: 1.1730742509559433
        show_eli_chat_bot: true
        user_ssh_keys_count_max: 4.078845849666752
        show_diagram_app_cluster_type_kubernetes: true
        wan_subnet_prefix_size_to_max_count: {}
        container_array_drive_arrays_max_count: 4.145608029883936
        container_platform_container_array_max_count: 1.0246457001441578
        threshold_max_count: 7.04836565559697
        container_array_drive_arrays_min_count: 7.386281948385884
        infrastructure_data_lake_max_count: 6.683562403749608
        infrastructure_deleted_max_count: 8.762042012749001
        owner_is_billable: true
        show_diagram_app_cluster_type_vmware_vcf: true
        storage_types: {}
        user_resource_iscsi_storage_space_max_gbytes: 5.533258397034986
        show_diagram_apps_global: true
        shared_drive_min_size_mbytes: 6.519180951018382
    UserDto:
      required:
      - accessLevel
      - accountId
      - archived
      - authenticatorCreatedTimestamp
      - authenticatorMustChange
      - blocked
      - brand
      - createdTimestamp
      - customPrices
      - displayName
      - email
      - emailStatus
      - excludeFromReports
      - experimentalTags
      - externalIds
      - franchise
      - guiSettings
      - id
      - isBillable
      - isBrandManager
      - isDatastorePublisher
      - isSuspended
      - isTestAccount
      - isTestingMode
      - language
      - lastLoginTimestamp
      - lastLoginType
      - limits
      - passwordChangeRequired
      - permissions
      - planType
      - promotionTags
      - provider
      type: object
      properties:
        id:
          type: number
          description: User ID
        franchise:
          type: string
          description: The franchise of the user
        displayName:
          type: string
          description: The display name of the user
        email:
          type: string
          description: The email address of the user
        authenticatorMustChange:
          type: number
          description: Whether the user must change authenticator
        authenticatorCreatedTimestamp:
          type: string
          description: The timestamp when the authenticator was created
        createdTimestamp:
          type: string
          description: The timestamp when the user was created
        lastLoginTimestamp:
          type: string
          description: The timestamp when the user logged in last
        lastLoginType:
          type: string
          description: The last login type of the user
        blocked:
          type: number
          description: Whether the user is blocked
        emailStatus:
          type: string
          description: The email status of the user
        passwordChangeRequired:
          type: number
          description: Whether the user must change password
        accessLevel:
          type: string
          description: The access level of the user
        isBillable:
          type: number
          description: Whether the user is billable
        isTestingMode:
          type: number
          description: Whether the user is in testing mode
        isSuspended:
          type: number
          description: Whether the user is suspended
        language:
          type: string
          description: The language of the user
        infrastructureIdDefault:
          type: number
          description: The default infrastructure ID of the user
        guiSettings:
          type: object
          description: The GUI settings of the user
        promotionTags:
          type: object
          description: The promotion tags of the user
        experimentalTags:
          type: object
          description: The experimental tags of the user
        customPrices:
          type: object
          description: The custom prices for the user
        permissions:
          type: object
          description: The permissions of the user
        externalIds:
          type: object
          description: The external IDs of the user
        limits:
          $ref: '#/components/schemas/UserLimits'
        excludeFromReports:
          type: number
          description: Whether the user is excluded from reports
        isTestAccount:
          type: number
          description: Whether the user is a test account
        planType:
          type: string
          description: The plan type of the user
          default: vanilla
        brand:
          type: string
          description: The brand of the user
          default: default
        isBrandManager:
          type: number
          description: Whether the user is a brand manager
        isDatastorePublisher:
          type: number
          description: Whether the user is a datastore publisher
        provider:
          type: string
          description: The provider of the user
          default: default
        archived:
          type: number
          description: Whether the user is a archived
        accountId:
          type: number
          description: The account ID of the user
      example:
        authenticatorCreatedTimestamp: authenticatorCreatedTimestamp
        isTestingMode: 2.3021358869347655
        franchise: franchise
        passwordChangeRequired: 5.962133916683182
        promotionTags: {}
        displayName: displayName
        customPrices: {}
        language: language
        infrastructureIdDefault: 9.301444243932576
        authenticatorMustChange: 6.027456183070403
        isTestAccount: 1.041444916118296
        archived: 9.132027271330688
        blocked: 1.4658129805029452
        provider: default
        permissions: {}
        isBrandManager: 4.678947989005849
        id: 0.8008281904610115
        isDatastorePublisher: 7.260521264802104
        brand: default
        email: email
        limits:
          allow_network_profiles: true
          wan_subnet_ipv4_max_count: 0.2025324113236393
          infrastructure_container_cluster_spark_array_allowed: true
          allowed_network_profiles: {}
          infrastructure_container_cluster_zookeeper_allowed: true
          infrastructure_container_platform_max_count: 9.369310271410669
          show_diagram_app_cluster_type_mapr: true
          show_diagram_app_cluster_type_cloudera: true
          infrastructure_vm_instance_group_max_count: 6.704019297950036
          show_diagram_app_cluster_type_datameer: true
          infrastructure_container_cluster_postgresql_allowed: true
          drive_array_drives_max_count: 1.4894159098541704
          infrastructure_inactive_max_count: 6.438423552598547
          file_share_max_size_gb: 8.969578798196912
          vm_instance_group_vm_instances_max_count: 3.353193347011243
          show_stack_trace: true
          bucket_max_size_gb: 3.0576100241049344
          infrastructure_active_max_count: 4.965218492984954
          show_diagram_app_cluster_type_datastax: true
          infrastructure_container_cluster_sparksql_allowed: true
          infrastructure_bucket_max_count: 7.740351818741173
          enable_custom_subnets: true
          infrastructure_file_share_max_count: 0.10263654006109402
          user_resource_servers_max_count: 3.2588565619047607
          infrastructure_cluster_max_count: 5.025004791520295
          infrastructure_container_cluster_kafka_allowed: true
          show_operating_system_images_tab: true
          drive_array_drives_min_count: 6.84685269835264
          infrastructure_shared_drive_max_count: 2.8841621266687802
          enable_custom_raid_configuration: true
          show_diagram_app_cluster_type_splunk: true
          show_diagram_app_cluster_type_couchbase: true
          show_diagram_vm_instance_groups: true
          infrastructure_container_cluster_zoomdata_allowed: true
          infrastructure_wan_max_count: 6.778324963048013
          infrastructure_instance_array_max_count: 3.5571952270680973
          show_diagram_app_cluster_type_vmware_vsphere: true
          show_diagram_app_cluster_type_exasol: true
          show_diagram_app_cluster_type_elasticsearch: true
          infrastructure_container_cluster_streamsets_allowed: true
          infrastructure_san_max_count: 1.284659006116532
          file_share_min_size_gb: 4.652396432933246
          shared_drive_max_size_mbytes: 7.058770351582356
          show_legacy_pages: true
          infrastructure_volume_template_experimental_allowed: true
          infrastructure_cluster_mysql_allowed: true
          infrastructure_container_cluster_max_count: 9.965781217890562
          allow_vlan_overrides: true
          show_diagram_app_cluster_type_mesos: true
          vm_instance_max_disk_size_mbytes: 3.0937452626664474
          wan_subnet_ipv6_max_count: 6.628464275087742
          bucket_min_size_gb: 3.0205796992916243
          container_array_containers_max_count: 3.616076749251911
          drive_max_size_mbytes: 7.457744773683766
          infrastructure_drive_array_max_count: 9.018348186070783
          show_diagram_app_cluster_type_hortonworks: true
          container_array_secrets_max_count: 1.2315135367772556
          show_diagram_app_cluster_type_kubernetes_eksa: true
          infrastructure_data_lake_enabled: true
          infrastructure_lan_max_count: 6.965117697638846
          server_type_reservation_max_quantity: 0.8851374739011653
          show_template_assets_view: true
          instance_array_instances_min_count: 5.944895607614016
          show_diagram_app_cluster_type_mysql_percona: true
          user_resource_server_type_name_to_max_count: {}
          instance_array_instances_max_count: 6.878052220127876
          show_experimental_pages: true
          container_array_containers_min_count: 2.027123023002322
          server_type_reservation_max_count: 7.143538047012306
          drive_min_size_mbytes: 1.1730742509559433
          show_eli_chat_bot: true
          user_ssh_keys_count_max: 4.078845849666752
          show_diagram_app_cluster_type_kubernetes: true
          wan_subnet_prefix_size_to_max_count: {}
          container_array_drive_arrays_max_count: 4.145608029883936
          container_platform_container_array_max_count: 1.0246457001441578
          threshold_max_count: 7.04836565559697
          container_array_drive_arrays_min_count: 7.386281948385884
          infrastructure_data_lake_max_count: 6.683562403749608
          infrastructure_deleted_max_count: 8.762042012749001
          owner_is_billable: true
          show_diagram_app_cluster_type_vmware_vcf: true
          storage_types: {}
          user_resource_iscsi_storage_space_max_gbytes: 5.533258397034986
          show_diagram_apps_global: true
          shared_drive_min_size_mbytes: 6.519180951018382
        lastLoginType: lastLoginType
        experimentalTags: {}
        isSuspended: 7.061401241503109
        planType: vanilla
        accessLevel: accessLevel
        createdTimestamp: createdTimestamp
        externalIds: {}
        isBillable: 5.637376656633329
        lastLoginTimestamp: lastLoginTimestamp
        excludeFromReports: 4.258773108174356
        accountId: 0.8774076871421566
        emailStatus: emailStatus
        guiSettings: {}
    CreateUserDto:
      type: object
      properties:
        displayName:
          type: string
          description: The display name of the user
        email:
          type: string
          description: The email address of the user
        accessLevel:
          type: string
          description: The access level of the user
        password:
          type: string
          description: The password of the user
        redirectUrl:
          type: string
          description: The redirect URL for the user
        AESKey:
          type: string
          description: The AES key for the user
        emailVerified:
          type: boolean
          description: Whether the user has verified their email address
          default: false
        createWithAccount:
          type: boolean
          description: Whether an account should be created with the user
          default: false
        accountId:
          type: number
          description: The account ID of the user
    UserUpdatePasswordDto:
      required:
      - newPassword
      type: object
      properties:
        newPassword:
          type: string
          description: The new password of the user
        oldPassword:
          type: string
          description: The old password of the user
    UserDelegateDto:
      type: object
      properties:
        email:
          type: string
          description: The user delegate e-mail
        createIfNotExists:
          type: boolean
          description: Whether to create the delegate if it does not exist. Can only
            be used when creating a new delegate.
          default: false
        removeDelegate:
          type: boolean
          description: Whether to remove the delegate. Cannot be used when creating
            a new delegate.
          default: false
    UserSuspendDto:
      type: object
      properties:
        suspendReason:
          type: string
          description: The suspend reason of the user
        suspendReasonPublicComment:
          type: string
          description: The public comment for the suspension
        suspendReasonPrivateComment:
          type: string
          description: The private comment for the suspension
        removeSuspension:
          type: boolean
          description: Whether to remove the suspension
          default: false
    UserPromotionDto:
      type: object
      properties:
        promotion:
          type: string
          description: The promotion for the user
        removePromotion:
          type: boolean
          description: Whether to remove the promotion
          default: false
    UserExperimentalTagDto:
      type: object
      properties:
        experimentalTag:
          type: string
          description: The experimental tag for the user
        removeExperimentalTag:
          type: boolean
          description: Whether to remove the experimental tag
          default: false
    UserResourcePermissionDto:
      type: object
      properties:
        resourcePermission:
          type: string
          description: The resource permission for the user
        enablePermission:
          type: boolean
          description: Whether to enable the permission
    UserResourcePermissionsDto:
      type: object
      properties:
        specialPermissions:
          type: array
          description: The new special permissions of the user.
          items:
            $ref: '#/components/schemas/UserResourcePermissionDto'
        passwordRevealPermissions:
          type: array
          description: The new password reveal permissions of the user.
          items:
            $ref: '#/components/schemas/UserResourcePermissionDto'
    UpdateUserDto:
      type: object
      properties:
        displayName:
          type: string
          description: The new display name of the user
        password:
          $ref: '#/components/schemas/UserUpdatePasswordDto'
        email:
          type: string
          description: The new login e-mail of the user
        redirectUrl:
          type: string
          description: The redirect URL for the user
        AESKey:
          type: string
          description: The AES key for the user
        emailStatus:
          type: string
          description: The new e-mail status of the user
        language:
          type: string
          description: The new language of the user
        brand:
          type: string
          description: The new brand of the user
        isBrandManager:
          type: boolean
          description: The new brand manager status of the user
        delegates:
          type: array
          description: The new user delegates of the user.
          items:
            $ref: '#/components/schemas/UserDelegateDto'
        isBlocked:
          type: boolean
          description: The new blocked status of the user
        suspension:
          $ref: '#/components/schemas/UserSuspendDto'
        accessLevel:
          type: string
          description: The new access level of the user
        promotions:
          type: array
          description: The new promotions of the user.
          items:
            $ref: '#/components/schemas/UserPromotionDto'
        experimentalTags:
          type: array
          description: The new experimental tags of the user.
          items:
            $ref: '#/components/schemas/UserExperimentalTagDto'
        customPrices:
          type: object
          description: The new custom prices of the user
        permissions:
          $ref: '#/components/schemas/UserResourcePermissionsDto'
        isTestAccount:
          type: boolean
          description: Whether the user account is a test one.
        isBillable:
          type: boolean
          description: Whether the user account is billable.
    ChangeUserAccountDto:
      required:
      - newAccountId
      type: object
      properties:
        newAccountId:
          type: number
          description: The ID of the parent account
    UserLimitsDto:
      type: object
      properties:
        containerArrayContainersMaxCount:
          type: number
        containerArrayContainersMinCount:
          type: number
        containerArrayDriveArraysMaxCount:
          type: number
        containerArrayDriveArraysMinCount:
          type: number
        containerArraySecretsMaxCount:
          type: number
        containerPlatformContainerArrayMaxCount:
          type: number
        driveArrayDrivesMaxCount:
          type: number
        driveArrayDrivesMinCount:
          type: number
        driveMaxSizeMbytes:
          type: number
        driveMinSizeMbytes:
          type: number
        infrastructureActiveMaxCount:
          type: number
        infrastructureClusterMaxCount:
          type: number
        infrastructureClusterMysqlAllowed:
          type: boolean
        infrastructureContainerClusterKafkaAllowed:
          type: boolean
        infrastructureContainerClusterMaxCount:
          type: number
        infrastructureContainerClusterPostgresqlAllowed:
          type: boolean
        infrastructureContainerClusterSparkArrayAllowed:
          type: boolean
        infrastructureContainerClusterSparksqlAllowed:
          type: boolean
        infrastructureContainerClusterStreamsetsAllowed:
          type: boolean
        infrastructureContainerClusterZookeeperAllowed:
          type: boolean
        infrastructureContainerClusterZoomdataAllowed:
          type: boolean
        infrastructureContainerPlatformMaxCount:
          type: number
        infrastructureDataLakeEnabled:
          type: boolean
        infrastructureDataLakeMaxCount:
          type: number
        infrastructureDeletedMaxCount:
          type: number
        infrastructureDriveArrayMaxCount:
          type: number
        infrastructureInactiveMaxCount:
          type: number
        infrastructureInstanceArrayMaxCount:
          type: number
        infrastructureLanMaxCount:
          type: number
        infrastructureSanMaxCount:
          type: number
        infrastructureSharedDriveMaxCount:
          type: number
        infrastructureVolumeTemplateExperimentalAllowed:
          type: boolean
        infrastructureWanMaxCount:
          type: number
        instanceArrayInstancesMaxCount:
          type: number
        instanceArrayInstancesMinCount:
          type: number
        infrastructureVmInstanceGroupMaxCount:
          type: number
        vmInstanceGroupVmInstancesMaxCount:
          type: number
        vmInstanceMaxDiskSizeMbytes:
          type: number
        ownerIsBillable:
          type: boolean
        serverTypeReservationMaxCount:
          type: number
        serverTypeReservationMaxQuantity:
          type: number
        sharedDriveMaxSizeMbytes:
          type: number
        sharedDriveMinSizeMbytes:
          type: number
        allowVlanOverrides:
          type: boolean
        allowNetworkProfiles:
          type: boolean
        showOperatingSystemImagesTab:
          type: boolean
        showTemplateAssetsView:
          type: boolean
        storageTypes:
          type: array
          items:
            type: string
        thresholdMaxCount:
          type: number
        userResourceIscsiStorageSpaceMaxGbytes:
          type: number
        userResourceServersMaxCount:
          type: number
        userResourceServerTypeNameToMaxCount:
          type: object
        userSshKeysCountMax:
          type: number
        wanSubnetIpv4MaxCount:
          type: number
        wanSubnetIpv6MaxCount:
          type: number
        wanSubnetPrefixSizeToMaxCount:
          type: object
        showLegacyPages:
          type: boolean
        showExperimentalPages:
          type: boolean
        showDiagramAppsGlobal:
          type: boolean
        showDiagramAppClusterTypeCloudera:
          type: boolean
        showDiagramAppClusterTypeCouchbase:
          type: boolean
        showDiagramAppClusterTypeDatameer:
          type: boolean
        showDiagramAppClusterTypeDatastax:
          type: boolean
        showDiagramAppClusterTypeElasticsearch:
          type: boolean
        showDiagramAppClusterTypeExasol:
          type: boolean
        showDiagramAppClusterTypeHortonworks:
          type: boolean
        showDiagramAppClusterTypeKubernetes:
          type: boolean
        showDiagramAppClusterTypeMapr:
          type: boolean
        showDiagramAppClusterTypeMesos:
          type: boolean
        showDiagramAppClusterTypeMysqlPercona:
          type: boolean
        showDiagramAppClusterTypeSplunk:
          type: boolean
        showDiagramAppClusterTypeVmwareVsphere:
          type: boolean
        showDiagramAppClusterTypeVmwareVcf:
          type: boolean
        showDiagramAppClusterTypeKubernetesEksa:
          type: boolean
        showDiagramVmInstanceGroups:
          type: boolean
        showEliChatBot:
          type: boolean
        enableCustomRaidConfiguration:
          type: boolean
        enableCustomSubnets:
          type: boolean
        showStackTrace:
          type: boolean
        allowedNetworkProfiles:
          type: object
      example:
        driveArrayDrivesMaxCount: 7.061401241503109
        infrastructureLanMaxCount: 5.025004791520295
        sharedDriveMaxSizeMbytes: 6.778324963048013
        vmInstanceMaxDiskSizeMbytes: 6.965117697638846
        showDiagramAppClusterTypeKubernetesEksa: true
        containerArraySecretsMaxCount: 5.637376656633329
        showDiagramVmInstanceGroups: true
        infrastructureSanMaxCount: 9.965781217890562
        showDiagramAppClusterTypeMysqlPercona: true
        vmInstanceGroupVmInstancesMaxCount: 3.5571952270680973
        userSshKeysCountMax: 3.0937452626664474
        infrastructureContainerClusterZookeeperAllowed: true
        showDiagramAppClusterTypeDatastax: true
        driveMaxSizeMbytes: 3.616076749251911
        showDiagramAppClusterTypeSplunk: true
        enableCustomRaidConfiguration: true
        infrastructureContainerClusterSparksqlAllowed: true
        infrastructureWanMaxCount: 6.683562403749608
        allowVlanOverrides: true
        showDiagramAppClusterTypeVmwareVcf: true
        infrastructureClusterMaxCount: 7.386281948385884
        infrastructureVolumeTemplateExperimentalAllowed: true
        infrastructureContainerClusterMaxCount: 1.2315135367772556
        showDiagramAppClusterTypeMapr: true
        infrastructureContainerClusterZoomdataAllowed: true
        infrastructureVmInstanceGroupMaxCount: 6.438423552598547
        showDiagramAppClusterTypeCouchbase: true
        driveMinSizeMbytes: 2.027123023002322
        infrastructureActiveMaxCount: 4.145608029883936
        containerArrayContainersMinCount: 6.027456183070403
        showDiagramAppClusterTypeCloudera: true
        showStackTrace: true
        containerArrayContainersMaxCount: 0.8008281904610115
        ownerIsBillable: true
        infrastructureDataLakeEnabled: true
        sharedDriveMinSizeMbytes: 6.878052220127876
        userResourceServersMaxCount: 3.353193347011243
        wanSubnetIpv4MaxCount: 7.143538047012306
        showDiagramAppClusterTypeExasol: true
        driveArrayDrivesMinCount: 9.301444243932576
        allowNetworkProfiles: true
        showOperatingSystemImagesTab: true
        wanSubnetIpv6MaxCount: 0.8851374739011653
        showDiagramAppsGlobal: true
        infrastructureInstanceArrayMaxCount: 4.965218492984954
        infrastructureDriveArrayMaxCount: 7.457744773683766
        wanSubnetPrefixSizeToMaxCount: {}
        containerPlatformContainerArrayMaxCount: 2.3021358869347655
        infrastructureContainerClusterKafkaAllowed: true
        infrastructureContainerClusterSparkArrayAllowed: true
        userResourceIscsiStorageSpaceMaxGbytes: 6.704019297950036
        infrastructureContainerClusterStreamsetsAllowed: true
        instanceArrayInstancesMinCount: 9.018348186070783
        infrastructureSharedDriveMaxCount: 9.369310271410669
        showDiagramAppClusterTypeMesos: true
        infrastructureDataLakeMaxCount: 1.4894159098541704
        showExperimentalPages: true
        infrastructureContainerClusterPostgresqlAllowed: true
        showEliChatBot: true
        showDiagramAppClusterTypeHortonworks: true
        storageTypes:
        - storageTypes
        - storageTypes
        showDiagramAppClusterTypeKubernetes: true
        userResourceServerTypeNameToMaxCount: {}
        enableCustomSubnets: true
        instanceArrayInstancesMaxCount: 8.762042012749001
        showLegacyPages: true
        infrastructureContainerPlatformMaxCount: 1.0246457001441578
        showDiagramAppClusterTypeVmwareVsphere: true
        infrastructureClusterMysqlAllowed: true
        containerArrayDriveArraysMinCount: 5.962133916683182
        showTemplateAssetsView: true
        showDiagramAppClusterTypeDatameer: true
        thresholdMaxCount: 5.944895607614016
        serverTypeReservationMaxQuantity: 2.8841621266687802
        containerArrayDriveArraysMaxCount: 1.4658129805029452
        infrastructureInactiveMaxCount: 1.1730742509559433
        showDiagramAppClusterTypeElasticsearch: true
        serverTypeReservationMaxCount: 1.284659006116532
        infrastructureDeletedMaxCount: 6.84685269835264
        allowedNetworkProfiles: {}
    AuthenticationProvider:
      required:
      - domains
      - enabled
      - name
      type: object
      properties:
        name:
          type: string
          description: Authentication provider name
          example: ldap
        enabled:
          type: boolean
          description: True if the provider is enabled
        domains:
          type: array
          description: Permitted domains
          items:
            type: string
      example:
        name: ldap
        domains:
        - domains
        - domains
        enabled: true
    AuthenticationProviderUpdate:
      type: object
      properties:
        enabled:
          type: boolean
          description: True if the provider is enabled
        domains:
          type: array
          description: Permitted domains
          items:
            type: string
    Link:
      required:
      - href
      - rel
      type: object
      properties:
        rel:
          type: string
          description: The relation
          example: self
        href:
          type: string
          description: The link URI
          example: /api/v2/path/to/resource
      example:
        rel: self
        href: /api/v2/path/to/resource
    ResourcePoolStatistics:
      required:
      - servers
      - subnetPools
      - users
      type: object
      properties:
        users:
          type: number
        servers:
          type: number
        subnetPools:
          type: number
      example:
        servers: 1.4658129805029452
        subnetPools: 5.962133916683182
        users: 6.027456183070403
    ResourcePoolWithStatsDto:
      required:
      - resource_pool_created_timestamp
      - resource_pool_description
      - resource_pool_id
      - resource_pool_label
      - resource_pool_updated_timestamp
      - statistics
      type: object
      properties:
        resource_pool_id:
          type: number
          description: Resource Pool ID
        resource_pool_label:
          type: string
          description: Label of the Resource Pool
        resource_pool_description:
          type: string
          description: Description of the Resource Pool
        resource_pool_created_timestamp:
          type: string
          description: Resource Pool Created Timestamp
        resource_pool_updated_timestamp:
          type: string
          description: Resource Pool Updated Timestamp
        statistics:
          $ref: '#/components/schemas/ResourcePoolStatistics'
      example:
        resource_pool_updated_timestamp: resource_pool_updated_timestamp
        resource_pool_created_timestamp: resource_pool_created_timestamp
        resource_pool_id: 0.8008281904610115
        resource_pool_description: resource_pool_description
        resource_pool_label: resource_pool_label
        statistics:
          servers: 1.4658129805029452
          subnetPools: 5.962133916683182
          users: 6.027456183070403
    ResourcePoolDto:
      required:
      - resource_pool_description
      - resource_pool_id
      - resource_pool_label
      type: object
      properties:
        resource_pool_id:
          type: number
          description: Resource Pool ID
        resource_pool_label:
          type: string
          description: Label of the Resource Pool
        resource_pool_description:
          type: string
          description: Description of the Resource Pool
      example:
        resource_pool_id: 0.8008281904610115
        resource_pool_description: resource_pool_description
        resource_pool_label: resource_pool_label
    CreateResourcePoolDto:
      required:
      - resource_pool_description
      - resource_pool_label
      type: object
      properties:
        resource_pool_label:
          type: string
          description: Label of the Resource Pool
        resource_pool_description:
          type: string
          description: Description of the Resource Pool
    UpdateResourcePoolDto:
      type: object
      properties:
        resource_pool_label:
          type: string
          description: Label of the Resource Pool
        resource_pool_description:
          type: string
          description: Description of the Resource Pool
    UpdateVM:
      type: object
      properties:
        comments:
          type: number
          description: VM comments.
          nullable: true
        tags:
          type: array
          description: Tags for the VM. This is a JSON object.
          items:
            type: string
    VM:
      required:
      - administrationState
      - allocationTimestamp
      - comments
      - cpuCores
      - createdTimestamp
      - datacenterName
      - diskSizeGB
      - disks
      - host
      - hosts
      - id
      - infrastructureId
      - instanceId
      - name
      - poolId
      - powerState
      - powerStateLastUpdatedTimestamp
      - ramGB
      - siteId
      - tags
      - typeId
      - userEmail
      - userId
      - vmInstanceId
      - vncPassword
      - vncPort
      type: object
      properties:
        id:
          type: number
          description: VM ID
          example: 1
        name:
          type: string
          description: Name of the VM
        siteId:
          type: number
          description: Id of the site for the VM
        datacenterName:
          type: string
          description: Datacenter of the VM
        infrastructureId:
          type: number
          description: ID of the infrastructure where this VM is deployed
          nullable: true
        userId:
          type: number
          description: ID of the user that owns this VM
          nullable: true
        userEmail:
          type: string
          description: Email of the user that owns this VM
          nullable: true
        instanceId:
          type: number
          description: ID of the instance where this VM is deployed
          nullable: true
        vmInstanceId:
          type: number
          description: ID of the VM instance where this VM is deployed
          nullable: true
        host:
          type: string
          description: Name of the host
        hosts:
          type: array
          description: List of hosts
          items:
            type: string
        cpuCores:
          type: number
          description: Number of CPU cores for the VM
          example: 2
        ramGB:
          type: number
          description: RAM in GB for the VM
          example: 2
        diskSizeGB:
          type: number
          description: Disk size in GB for the VM
          example: 2
        typeId:
          type: number
          description: The id of the VM Type. This is a number.
          example: 1
        poolId:
          type: number
          description: The id of the VM Pool. This is a number.
          example: 1
        administrationState:
          type: object
          description: The administration state of the VM.
          enum:
          - managed
          - unmanaged
          - generic_endpoint
        comments:
          type: number
          description: VM comments.
          nullable: true
        powerState:
          type: object
          description: The power state of the VM.
          enum:
          - "on"
          - "off"
          - unknown
        powerStateLastUpdatedTimestamp:
          type: string
          description: Timestamp when the VM power state was last updated.
        createdTimestamp:
          type: string
          description: Timestamp when the VM was created
        allocationTimestamp:
          type: string
          description: Timestamp when the VM was allocated
        tags:
          type: array
          description: Tags for the VM.
          items:
            type: string
        vncPort:
          type: number
          description: The port number for the VNC server.
          nullable: true
          example: 5900
        vncPassword:
          type: string
          description: The password for the VNC server.
          nullable: true
        disks:
          type: array
          description: The disks of the VM.
          items:
            $ref: '#/components/schemas/VMDisk'
      example:
        allocationTimestamp: allocationTimestamp
        datacenterName: datacenterName
        disks:
        - sizeGB: 100
          vmId: 1
          datastore: local
          id: 1
        - sizeGB: 100
          vmId: 1
          datastore: local
          id: 1
        ramGB: 2
        powerStateLastUpdatedTimestamp: powerStateLastUpdatedTimestamp
        instanceId: 5.962133916683182
        powerState: {}
        host: host
        userEmail: userEmail
        id: 1
        diskSizeGB: 2
        vncPort: 5900
        comments: 2.3021358869347655
        hosts:
        - hosts
        - hosts
        createdTimestamp: createdTimestamp
        userId: 1.4658129805029452
        tags:
        - tags
        - tags
        vmInstanceId: 5.637376656633329
        vncPassword: vncPassword
        infrastructureId: 6.027456183070403
        cpuCores: 2
        administrationState: {}
        name: name
        poolId: 1
        siteId: 0.8008281904610115
        typeId: 1
    VMPool:
      required:
      - certificate
      - createdTimestamp
      - datacenterName
      - description
      - externalIdentifier
      - freeRamGB
      - freeSpaceGB
      - id
      - inMaintenance
      - isExperimental
      - links
      - managementHost
      - name
      - siteId
      - status
      - tags
      - totalRamGB
      - totalSpaceGB
      - type
      - updatedTimestamp
      - usedRamGB
      - usedSpaceGB
      type: object
      properties:
        id:
          type: number
          description: VM Pool ID
          example: 1
        siteId:
          type: number
          description: Id of the site for the VM
        datacenterName:
          type: string
          description: Datacenter of the VM
        managementHost:
          type: string
          description: Host of the VM Pool
        name:
          type: string
          description: Name of the VM Pool
        description:
          type: string
          description: Description of the VM Pool
          nullable: true
        type:
          type: string
          description: Type of the VM Pool
          enum:
          - incus
        certificate:
          type: string
          description: Certificate of the VM Pool
        status:
          type: string
          description: Status of the VM Pool
          enum:
          - active
          - deleted
          - registering
        externalIdentifier:
          type: string
          description: External identifier of the VM Pool
        totalRamGB:
          type: number
          description: Number of total RAM GB in the VM Pool
        usedRamGB:
          type: number
          description: Number of used RAM GB in the VM Pool
        freeRamGB:
          type: number
          description: Number of free RAM GB in the VM Pool
        totalSpaceGB:
          type: number
          description: Number of total disk space GB in the VM Pool
        usedSpaceGB:
          type: number
          description: Number of used disk space GB in the VM Pool
        freeSpaceGB:
          type: number
          description: Number of free disk space GB in the VM Pool
        inMaintenance:
          type: number
          description: "Flag to indicate if the VM Pool is in maintenance mode. 1\
            \ for true, 0 for false. Default is 0."
          example: 1
        isExperimental:
          type: number
          description: "Flag to indicate if the VM Pool is experimental. 1 for true,\
            \ 0 for false. Default is 0."
          example: 1
        createdTimestamp:
          type: string
          description: Timestamp when the VM Pool was created
        updatedTimestamp:
          type: string
          description: Timestamp when the VM Pool was updated
        tags:
          type: array
          description: Tags for the VM Pool.
          items:
            type: string
        links:
          type: object
      example:
        totalRamGB: 6.027456183070403
        datacenterName: datacenterName
        usedRamGB: 1.4658129805029452
        inMaintenance: 1
        managementHost: managementHost
        usedSpaceGB: 2.3021358869347655
        freeSpaceGB: 7.061401241503109
        freeRamGB: 5.962133916683182
        createdTimestamp: createdTimestamp
        certificate: certificate
        description: description
        type: incus
        updatedTimestamp: updatedTimestamp
        tags:
        - tags
        - tags
        isExperimental: 1
        name: name
        siteId: 0.8008281904610115
        externalIdentifier: externalIdentifier
        links: {}
        id: 1
        totalSpaceGB: 5.637376656633329
        status: active
    VMPoolList:
      required:
      - data
      - links
      - meta
      type: object
      properties:
        data:
          type: array
          description: List of VM Pools
          items:
            $ref: '#/components/schemas/VMPool'
        meta:
          type: object
          description: Meta information
        links:
          type: object
          description: Links to other resources
      example:
        data:
        - totalRamGB: 6.027456183070403
          datacenterName: datacenterName
          usedRamGB: 1.4658129805029452
          inMaintenance: 1
          managementHost: managementHost
          usedSpaceGB: 2.3021358869347655
          freeSpaceGB: 7.061401241503109
          freeRamGB: 5.962133916683182
          createdTimestamp: createdTimestamp
          certificate: certificate
          description: description
          type: incus
          updatedTimestamp: updatedTimestamp
          tags:
          - tags
          - tags
          isExperimental: 1
          name: name
          siteId: 0.8008281904610115
          externalIdentifier: externalIdentifier
          links: {}
          id: 1
          totalSpaceGB: 5.637376656633329
          status: active
        - totalRamGB: 6.027456183070403
          datacenterName: datacenterName
          usedRamGB: 1.4658129805029452
          inMaintenance: 1
          managementHost: managementHost
          usedSpaceGB: 2.3021358869347655
          freeSpaceGB: 7.061401241503109
          freeRamGB: 5.962133916683182
          createdTimestamp: createdTimestamp
          certificate: certificate
          description: description
          type: incus
          updatedTimestamp: updatedTimestamp
          tags:
          - tags
          - tags
          isExperimental: 1
          name: name
          siteId: 0.8008281904610115
          externalIdentifier: externalIdentifier
          links: {}
          id: 1
          totalSpaceGB: 5.637376656633329
          status: active
        meta: {}
        links: {}
    CreateVMPool:
      type: object
      properties:
        siteId:
          type: number
          description: Id of the site for the VM Pool
        managementHost:
          type: string
          description: Host of the VM Pool
        managementPort:
          type: number
          description: Port of the VM Pool
        name:
          type: string
          description: Name of the VM Pool
        description:
          type: string
          description: Description of the VM Pool
          nullable: true
        type:
          type: string
          description: Type of the VM Pool
          example: incus
          enum:
          - incus
        certificate:
          type: string
          description: Certificate of the VM Pool
        privateKey:
          type: string
          description: Private key of the VM Pool
    UpdateVMPool:
      type: object
      properties:
        description:
          type: string
          description: Datacenter of the VM Pool
          nullable: true
        managementHost:
          type: string
          description: Host of the VM Pool
        managementPort:
          type: number
          description: Port of the VM Pool
        certificate:
          type: string
          description: Certificate of the VM Pool
        privateKey:
          type: string
          description: Private key of the VM Pool
        status:
          type: string
          description: Status of the VM Pool
          enum:
          - active
        inMaintenance:
          type: number
          description: "Flag to indicate if the VM Pool is in maintenance mode. 1\
            \ for true, 0 for false. Default is 0."
          example: 0
        isExperimental:
          type: number
          description: "Flag to indicate if the VM Pool is experimental. 1 for true,\
            \ 0 for false. Default is 0."
          example: 0
        tags:
          type: array
          description: Tags for the VM Pool.
          items:
            type: string
    VMPoolHosts:
      required:
      - address
      - architecture
      - database
      - failureDomain
      - freeRamGB
      - freeSpaceGB
      - id
      - links
      - name
      - poolId
      - port
      - roles
      - status
      - totalRamGB
      - totalSpaceGB
      - updatedTimestamp
      - usedRamGB
      - usedSpaceGB
      type: object
      properties:
        id:
          type: number
          description: VM Pool Host ID
          example: 1
        name:
          type: string
          description: Name of the VM Pool Host
        address:
          type: string
          description: Address of the VM Pool Host
        port:
          type: number
          description: Port of the VM Pool Host
          example: 1
        poolId:
          type: number
          description: VM Pool ID
          example: 1
        roles:
          type: array
          description: Roles of the VM Pool Host
          items:
            type: string
        failureDomain:
          type: string
          description: Failure domain of the VM Pool Host
        architecture:
          type: string
          description: Architecture of the VM Pool Host
        database:
          type: number
          description: Flag specifying if the VM Pool Host is database
        status:
          type: string
          description: Status of the VM Pool Host
        description:
          type: string
          description: Description of the VM Pool Host
        totalRamGB:
          type: number
          description: Total RAM GB of the VM Pool Host
        freeRamGB:
          type: number
          description: Free RAM GB of the VM Pool Host
        usedRamGB:
          type: number
          description: Used RAM GB of the VM Pool Host
        totalSpaceGB:
          type: number
          description: Total Space GB of the VM Pool Host
        usedSpaceGB:
          type: number
          description: Used Space GB of the VM Pool Host
        freeSpaceGB:
          type: number
          description: Free Space GB of the VM Pool Host
        updatedTimestamp:
          type: string
          description: Timestamp when the VM Pool Host was updated
        links:
          type: object
      example:
        totalRamGB: 6.027456183070403
        address: address
        usedRamGB: 5.962133916683182
        failureDomain: failureDomain
        usedSpaceGB: 2.3021358869347655
        freeSpaceGB: 7.061401241503109
        roles:
        - roles
        - roles
        freeRamGB: 1.4658129805029452
        description: description
        updatedTimestamp: updatedTimestamp
        database: 0.8008281904610115
        port: 1
        name: name
        poolId: 1
        links: {}
        id: 1
        totalSpaceGB: 5.637376656633329
        architecture: architecture
        status: status
    VMPoolHostsList:
      required:
      - data
      - links
      - meta
      type: object
      properties:
        data:
          type: array
          description: List of VM Pool Hosts
          items:
            $ref: '#/components/schemas/VMPoolHosts'
        meta:
          type: object
          description: Meta information
        links:
          type: object
          description: Links to other resources
      example:
        data:
        - totalRamGB: 6.027456183070403
          address: address
          usedRamGB: 5.962133916683182
          failureDomain: failureDomain
          usedSpaceGB: 2.3021358869347655
          freeSpaceGB: 7.061401241503109
          roles:
          - roles
          - roles
          freeRamGB: 1.4658129805029452
          description: description
          updatedTimestamp: updatedTimestamp
          database: 0.8008281904610115
          port: 1
          name: name
          poolId: 1
          links: {}
          id: 1
          totalSpaceGB: 5.637376656633329
          architecture: architecture
          status: status
        - totalRamGB: 6.027456183070403
          address: address
          usedRamGB: 5.962133916683182
          failureDomain: failureDomain
          usedSpaceGB: 2.3021358869347655
          freeSpaceGB: 7.061401241503109
          roles:
          - roles
          - roles
          freeRamGB: 1.4658129805029452
          description: description
          updatedTimestamp: updatedTimestamp
          database: 0.8008281904610115
          port: 1
          name: name
          poolId: 1
          links: {}
          id: 1
          totalSpaceGB: 5.637376656633329
          architecture: architecture
          status: status
        meta: {}
        links: {}
    VMPoolHostInterfaces:
      required:
      - fabric
      - hostId
      - id
      - links
      - macAddress
      - name
      type: object
      properties:
        id:
          type: number
          description: VM Pool Host Interface ID
          example: 1
        hostId:
          type: number
          description: VM Pool Host ID
          example: 1
        name:
          type: string
          description: Name of the VM Pool Host Interface
        macAddress:
          type: string
          description: MAC Address of the VM Pool Host Interface
        fabric:
          type: string
          description: Fabric of the VM Pool Host Interface
          enum:
          - wan
          - san
        links:
          type: object
      example:
        macAddress: macAddress
        fabric: wan
        name: name
        hostId: 1
        links: {}
        id: 1
    UpdateVMPoolClusterHostInterface:
      type: object
      properties:
        fabric:
          type: string
          description: Fabric of the switch interface
          enum:
          - wan
          - san
        switchId:
          type: number
          description: Id of the switch
        switchInterfaceName:
          type: number
          description: Name of the switch interface
    VMDisk:
      required:
      - datastore
      - id
      - sizeGB
      - vmId
      type: object
      properties:
        id:
          type: number
          description: VM ID
          example: 1
        vmId:
          type: number
          description: VM ID
          example: 1
        datastore:
          type: string
          description: Name of the VM Disk datastore
          example: local
        sizeGB:
          type: number
          description: Size of the VM Disk in GB
          example: 100
      example:
        sizeGB: 100
        vmId: 1
        datastore: local
        id: 1
    VMList:
      required:
      - data
      - links
      - meta
      type: object
      properties:
        data:
          type: array
          description: List of VMs
          items:
            $ref: '#/components/schemas/VM'
        meta:
          type: object
          description: Meta information
        links:
          type: object
          description: Links to other resources
      example:
        data:
        - allocationTimestamp: allocationTimestamp
          datacenterName: datacenterName
          disks:
          - sizeGB: 100
            vmId: 1
            datastore: local
            id: 1
          - sizeGB: 100
            vmId: 1
            datastore: local
            id: 1
          ramGB: 2
          powerStateLastUpdatedTimestamp: powerStateLastUpdatedTimestamp
          instanceId: 5.962133916683182
          powerState: {}
          host: host
          userEmail: userEmail
          id: 1
          diskSizeGB: 2
          vncPort: 5900
          comments: 2.3021358869347655
          hosts:
          - hosts
          - hosts
          createdTimestamp: createdTimestamp
          userId: 1.4658129805029452
          tags:
          - tags
          - tags
          vmInstanceId: 5.637376656633329
          vncPassword: vncPassword
          infrastructureId: 6.027456183070403
          cpuCores: 2
          administrationState: {}
          name: name
          poolId: 1
          siteId: 0.8008281904610115
          typeId: 1
        - allocationTimestamp: allocationTimestamp
          datacenterName: datacenterName
          disks:
          - sizeGB: 100
            vmId: 1
            datastore: local
            id: 1
          - sizeGB: 100
            vmId: 1
            datastore: local
            id: 1
          ramGB: 2
          powerStateLastUpdatedTimestamp: powerStateLastUpdatedTimestamp
          instanceId: 5.962133916683182
          powerState: {}
          host: host
          userEmail: userEmail
          id: 1
          diskSizeGB: 2
          vncPort: 5900
          comments: 2.3021358869347655
          hosts:
          - hosts
          - hosts
          createdTimestamp: createdTimestamp
          userId: 1.4658129805029452
          tags:
          - tags
          - tags
          vmInstanceId: 5.637376656633329
          vncPassword: vncPassword
          infrastructureId: 6.027456183070403
          cpuCores: 2
          administrationState: {}
          name: name
          poolId: 1
          siteId: 0.8008281904610115
          typeId: 1
        meta: {}
        links: {}
    VMType:
      required:
      - cpuCores
      - displayName
      - forUnmanagedVMsOnly
      - id
      - isExperimental
      - label
      - links
      - name
      - ramGB
      - tags
      type: object
      properties:
        id:
          type: number
          description: VM Type ID
          example: 1
        name:
          type: string
          description: Name of the VM Pool type
        displayName:
          type: string
          description: Display name of the VM Pool type
        label:
          type: string
          description: Label of the VM Pool type
        cpuCores:
          type: number
          description: Number of CPU cores for the VM Pool type
          example: 2
        ramGB:
          type: number
          description: RAM in GB for the VM Pool type
          example: 2
        isExperimental:
          type: number
          description: "Flag to indicate if the VM Pool is experimental. 1 for true,\
            \ 0 for false. Default is 0."
          example: 1
        tags:
          type: array
          description: Tags for the VM Type.
          items:
            type: string
        forUnmanagedVMsOnly:
          type: number
          description: "Flag to indicate if the VM Pool is for unmanaged VMs only.\
            \ 1 for true, 0 for false. Default is 0."
          example: 0
        links:
          type: object
      example:
        forUnmanagedVMsOnly: 0
        isExperimental: 1
        cpuCores: 2
        displayName: displayName
        name: name
        links: {}
        id: 1
        label: label
        ramGB: 2
        tags:
        - tags
        - tags
    VMTypeList:
      required:
      - data
      - links
      - meta
      type: object
      properties:
        data:
          type: array
          description: List of VM Types
          items:
            $ref: '#/components/schemas/VMType'
        meta:
          type: object
          description: Meta information
        links:
          type: object
          description: Links to other resources
      example:
        data:
        - forUnmanagedVMsOnly: 0
          isExperimental: 1
          cpuCores: 2
          displayName: displayName
          name: name
          links: {}
          id: 1
          label: label
          ramGB: 2
          tags:
          - tags
          - tags
        - forUnmanagedVMsOnly: 0
          isExperimental: 1
          cpuCores: 2
          displayName: displayName
          name: name
          links: {}
          id: 1
          label: label
          ramGB: 2
          tags:
          - tags
          - tags
        meta: {}
        links: {}
    CreateVMType:
      type: object
      properties:
        name:
          type: string
          description: Name of the VM type
        displayName:
          type: string
          description: Display name of the VM type
        label:
          type: string
          description: Label of the VM type
        cpuCores:
          type: number
          description: Number of CPU cores for the VM type
          example: 2
        ramGB:
          type: number
          description: RAM in GB for the VM type
          example: 2
        isExperimental:
          type: number
          description: "Flag to indicate if the VM Type is experimental. 1 for true,\
            \ 0 for false. Default is 0."
          example: 0
        tags:
          type: array
          description: Tags for the VM Type. This is a JSON object.
          items:
            type: string
        forUnmanagedVMsOnly:
          type: number
          description: "Flag to indicate if the VM Type is for unmanaged VMs only.\
            \ 1 for true, 0 for false. Default is 0."
          example: 0
    UpdateVMType:
      type: object
      properties:
        displayName:
          type: string
          description: Display name of the VM type
        label:
          type: string
          description: Label of the VM type
        tags:
          type: array
          description: Tags for the VM Type. This is a JSON object.
          items:
            type: string
        isExperimental:
          type: number
          description: "Flag to indicate if the VM Type is experimental. 1 for true,\
            \ 0 for false. Default is 0."
          example: 0
        forUnmanagedVMsOnly:
          type: number
          description: "Flag to indicate if the VM Type is for unmanaged VMs only.\
            \ 1 for true, 0 for false. Default is 0."
          example: 0
    InfrastructureDeployShutdownOptions:
      required:
      - attemptSoftShutdown
      - forceShutdown
      - softShutdownTimeout
      type: object
      properties:
        attemptSoftShutdown:
          type: boolean
          description: Attempt soft shutdown
        softShutdownTimeout:
          type: number
          description: Soft shutdown timeout in seconds
        forceShutdown:
          type: boolean
          description: Force shutdown
    InfrastructureDeployOptions:
      required:
      - allowDataLoss
      - shutdownOptions
      type: object
      properties:
        allowDataLoss:
          type: boolean
          description: Allow data loss
        shutdownOptions:
          $ref: '#/components/schemas/InfrastructureDeployShutdownOptions'
    InfrastructureDto:
      required:
      - datacenterName
      - infrastructureChangeId
      - infrastructureId
      - infrastructureServiceStatus
      - operation
      type: object
      properties:
        infrastructureId:
          type: number
          description: Infrastructure Id
          example: 1
        infrastructureChangeId:
          type: number
          description: Infrastructure Change ID
          example: 1
        datacenterName:
          type: string
          description: Name of the datacenter
        userIdOwner:
          type: number
          description: Owner of the infrastructure
          nullable: true
          example: 100
        infrastructureServiceStatus:
          type: string
          description: Status of the infrastructure
          example: active
          enum:
          - ordered
          - active
          - suspended
          - stopped
          - deleted
        operation:
          type: object
          description: Operation object of the infrastructure
      example:
        infrastructureChangeId: 1
        infrastructureId: 1
        datacenterName: datacenterName
        infrastructureServiceStatus: active
        userIdOwner: 100
        operation: {}
    ServerRegistrationDto:
      required:
      - bmcHostname
      - siteId
      type: object
      properties:
        bmcHostname:
          type: string
          description: The BMC hostname of the server.
        siteId:
          type: number
          description: The site id where the server is located.
        bmcUser:
          type: string
          description: The BMC username to use.
        bmcPassword:
          type: string
          description: The BMC password to use.
        vendor:
          type: string
          description: The vendor of the server.
          enum:
          - Unknown
          - Dell
          - Lenovo
          - HP
          - HPE
        model:
          type: string
          description: The model of the server.
        macAddress:
          type: string
          description: The MAC address of the server.
        uuid:
          type: string
          description: The UUID of the server.
        serialNumber:
          type: string
          description: The Serial Number of the server.
    AfcJobInfo:
      required:
      - afcGroupId
      - afcId
      type: object
      properties:
        afcId:
          type: number
          description: The id of the afc job.
        afcGroupId:
          type: number
          description: The id of the afc job group.
      example:
        afcGroupId: 1.4658129805029452
        afcId: 6.027456183070403
    ServerRegistrationResponseDto:
      required:
      - id
      - serialNumber
      - uuid
      type: object
      properties:
        id:
          type: number
          description: The id of the server.
        serialNumber:
          type: string
          description: The Serial Number of the server.
        uuid:
          type: string
          description: The UUID of the server.
        jobInfo:
          $ref: '#/components/schemas/AfcJobInfo'
        links:
          type: array
          description: Reference links
          items:
            $ref: '#/components/schemas/Link'
      example:
        serialNumber: serialNumber
        links:
        - rel: self
          href: /api/v2/path/to/resource
        - rel: self
          href: /api/v2/path/to/resource
        id: 0.8008281904610115
        uuid: uuid
        jobInfo:
          afcGroupId: 1.4658129805029452
          afcId: 6.027456183070403
    ServerReRegistrationResponseDto:
      required:
      - id
      type: object
      properties:
        id:
          type: number
          description: The id of the server.
        jobInfo:
          $ref: '#/components/schemas/AfcJobInfo'
      example:
        id: 0.8008281904610115
        jobInfo:
          afcGroupId: 1.4658129805029452
          afcId: 6.027456183070403
    Server:
      required:
      - administrationState
      - datacenterName
      - diskCount
      - gpuCount
      - gpuInfo
      - isBasicCampusEndpoint
      - managementAddress
      - passwordEncrypted
      - powerStatus
      - powerStatusLastUpdateTimestamp
      - processorCoreCount
      - processorCoreMhz
      - processorCount
      - ramGbytes
      - requiresReRegister
      - serverClass
      - serverCreatedTimestamp
      - serverDhcpStatus
      - serverDiskWipe
      - serverId
      - serverMetricsMetadata
      - serverStatus
      - serverSupportsOobProvisioning
      - serverSupportsSol
      - serverSupportsVirtualMedia
      - serverTypeId
      - serverUUID
      - supportsFcProvisioning
      - username
      type: object
      properties:
        serverId:
          type: number
        serverTypeId:
          type: number
        datacenterName:
          type: string
        serverUUID:
          type: string
        serialNumber:
          type: string
          nullable: true
        managementAddress:
          type: string
        username:
          type: string
        passwordEncrypted:
          type: string
        impiVersion:
          type: string
          nullable: true
        ramGbytes:
          type: number
        processorCount:
          type: number
        processorCoreMhz:
          type: number
        processorCoreCount:
          type: number
        processorName:
          type: string
          nullable: true
        processorCpuMark:
          type: number
          nullable: true
        processorThreads:
          type: number
          nullable: true
        diskCount:
          type: number
        mgmtSnmpPort:
          type: number
          nullable: true
        mgmtSnmpPasswordEncrypted:
          type: string
          nullable: true
        bmcMacAddress:
          type: string
        serverMetricsMetadata:
          type: object
        vendor:
          type: string
          nullable: true
        vendorSkuId:
          type: string
          nullable: true
        model:
          type: string
          nullable: true
        vncPort:
          type: number
          nullable: true
        vncPasswordEncrypted:
          type: number
          nullable: true
        isBasicCampusEndpoint:
          type: number
        serverCleanupPolicyId:
          type: number
          nullable: true
        requiresReRegister:
          type: number
        serverSupportsSol:
          type: number
        serverSupportsVirtualMedia:
          type: number
        serverSupportsOobProvisioning:
          type: number
        biosInfo:
          type: object
        vendorInfo:
          type: object
        serverClass:
          type: string
          enum:
          - unknown
          - bigdata
          - hdfs
        serverStatus:
          type: string
          enum:
          - registering
          - available
          - cleaning_required
          - cleaning
          - used
          - used_registering
          - defective
          - removed_from_rack
          - decommissioned
          - updating_firmware
          - used_diagnostics
          - pending_registration
          - unavailable
        serverComments:
          type: string
          nullable: true
        serverCapacityMbps:
          type: number
          nullable: true
        serverDiskWipe:
          type: number
        serverDiskCount:
          type: number
          nullable: true
        administrationState:
          type: string
          enum:
          - managed
          - unmanaged
          - generic_endpoint
        serverDhcpStatus:
          type: string
          enum:
          - quarantine
          - deny_requests
          - allow_requests
          - ansible_provision
        gpuCount:
          type: number
        gpuInfo:
          type: array
          items:
            type: object
        submodel:
          type: string
          nullable: true
        supportsFcProvisioning:
          type: number
        bootLastUpdateTimestamp:
          type: string
          nullable: true
        registeredTimestamp:
          type: string
          nullable: true
        serverCreatedTimestamp:
          type: string
        powerStatus:
          type: string
          enum:
          - unknown
          - "on"
          - "off"
        powerStatusLastUpdateTimestamp:
          type: string
      example:
        datacenterName: datacenterName
        mgmtSnmpPasswordEncrypted: mgmtSnmpPasswordEncrypted
        serverSupportsOobProvisioning: 1.1730742509559433
        passwordEncrypted: passwordEncrypted
        diskCount: 3.616076749251911
        serverId: 0.8008281904610115
        processorCoreMhz: 5.637376656633329
        powerStatus: unknown
        serverCreatedTimestamp: serverCreatedTimestamp
        serverDhcpStatus: quarantine
        model: model
        bmcMacAddress: bmcMacAddress
        bootLastUpdateTimestamp: bootLastUpdateTimestamp
        gpuCount: 9.369310271410669
        serverSupportsSol: 6.84685269835264
        vncPasswordEncrypted: 7.386281948385884
        vncPort: 4.145608029883936
        serialNumber: serialNumber
        submodel: submodel
        registeredTimestamp: registeredTimestamp
        isBasicCampusEndpoint: 1.2315135367772556
        gpuInfo:
        - {}
        - {}
        processorThreads: 9.301444243932576
        serverCleanupPolicyId: 1.0246457001441578
        serverDiskWipe: 5.025004791520295
        processorCpuMark: 7.061401241503109
        ramGbytes: 1.4658129805029452
        biosInfo: {}
        serverTypeId: 6.027456183070403
        requiresReRegister: 1.4894159098541704
        serverStatus: registering
        serverDiskCount: 9.965781217890562
        vendorInfo: {}
        serverClass: unknown
        vendorSkuId: vendorSkuId
        serverUUID: serverUUID
        serverMetricsMetadata: {}
        processorCoreCount: 2.3021358869347655
        vendor: vendor
        serverSupportsVirtualMedia: 7.457744773683766
        supportsFcProvisioning: 6.683562403749608
        processorName: processorName
        managementAddress: managementAddress
        serverCapacityMbps: 4.965218492984954
        processorCount: 5.962133916683182
        serverComments: serverComments
        mgmtSnmpPort: 2.027123023002322
        powerStatusLastUpdateTimestamp: powerStatusLastUpdateTimestamp
        administrationState: managed
        impiVersion: impiVersion
        username: username
    ServerList:
      required:
      - data
      - links
      - meta
      type: object
      properties:
        data:
          type: array
          description: List of Servers
          items:
            $ref: '#/components/schemas/Server'
        meta:
          type: object
          description: Meta information
        links:
          type: object
          description: Links to other resources
      example:
        data:
        - datacenterName: datacenterName
          mgmtSnmpPasswordEncrypted: mgmtSnmpPasswordEncrypted
          serverSupportsOobProvisioning: 1.1730742509559433
          passwordEncrypted: passwordEncrypted
          diskCount: 3.616076749251911
          serverId: 0.8008281904610115
          processorCoreMhz: 5.637376656633329
          powerStatus: unknown
          serverCreatedTimestamp: serverCreatedTimestamp
          serverDhcpStatus: quarantine
          model: model
          bmcMacAddress: bmcMacAddress
          bootLastUpdateTimestamp: bootLastUpdateTimestamp
          gpuCount: 9.369310271410669
          serverSupportsSol: 6.84685269835264
          vncPasswordEncrypted: 7.386281948385884
          vncPort: 4.145608029883936
          serialNumber: serialNumber
          submodel: submodel
          registeredTimestamp: registeredTimestamp
          isBasicCampusEndpoint: 1.2315135367772556
          gpuInfo:
          - {}
          - {}
          processorThreads: 9.301444243932576
          serverCleanupPolicyId: 1.0246457001441578
          serverDiskWipe: 5.025004791520295
          processorCpuMark: 7.061401241503109
          ramGbytes: 1.4658129805029452
          biosInfo: {}
          serverTypeId: 6.027456183070403
          requiresReRegister: 1.4894159098541704
          serverStatus: registering
          serverDiskCount: 9.965781217890562
          vendorInfo: {}
          serverClass: unknown
          vendorSkuId: vendorSkuId
          serverUUID: serverUUID
          serverMetricsMetadata: {}
          processorCoreCount: 2.3021358869347655
          vendor: vendor
          serverSupportsVirtualMedia: 7.457744773683766
          supportsFcProvisioning: 6.683562403749608
          processorName: processorName
          managementAddress: managementAddress
          serverCapacityMbps: 4.965218492984954
          processorCount: 5.962133916683182
          serverComments: serverComments
          mgmtSnmpPort: 2.027123023002322
          powerStatusLastUpdateTimestamp: powerStatusLastUpdateTimestamp
          administrationState: managed
          impiVersion: impiVersion
          username: username
        - datacenterName: datacenterName
          mgmtSnmpPasswordEncrypted: mgmtSnmpPasswordEncrypted
          serverSupportsOobProvisioning: 1.1730742509559433
          passwordEncrypted: passwordEncrypted
          diskCount: 3.616076749251911
          serverId: 0.8008281904610115
          processorCoreMhz: 5.637376656633329
          powerStatus: unknown
          serverCreatedTimestamp: serverCreatedTimestamp
          serverDhcpStatus: quarantine
          model: model
          bmcMacAddress: bmcMacAddress
          bootLastUpdateTimestamp: bootLastUpdateTimestamp
          gpuCount: 9.369310271410669
          serverSupportsSol: 6.84685269835264
          vncPasswordEncrypted: 7.386281948385884
          vncPort: 4.145608029883936
          serialNumber: serialNumber
          submodel: submodel
          registeredTimestamp: registeredTimestamp
          isBasicCampusEndpoint: 1.2315135367772556
          gpuInfo:
          - {}
          - {}
          processorThreads: 9.301444243932576
          serverCleanupPolicyId: 1.0246457001441578
          serverDiskWipe: 5.025004791520295
          processorCpuMark: 7.061401241503109
          ramGbytes: 1.4658129805029452
          biosInfo: {}
          serverTypeId: 6.027456183070403
          requiresReRegister: 1.4894159098541704
          serverStatus: registering
          serverDiskCount: 9.965781217890562
          vendorInfo: {}
          serverClass: unknown
          vendorSkuId: vendorSkuId
          serverUUID: serverUUID
          serverMetricsMetadata: {}
          processorCoreCount: 2.3021358869347655
          vendor: vendor
          serverSupportsVirtualMedia: 7.457744773683766
          supportsFcProvisioning: 6.683562403749608
          processorName: processorName
          managementAddress: managementAddress
          serverCapacityMbps: 4.965218492984954
          processorCount: 5.962133916683182
          serverComments: serverComments
          mgmtSnmpPort: 2.027123023002322
          powerStatusLastUpdateTimestamp: powerStatusLastUpdateTimestamp
          administrationState: managed
          impiVersion: impiVersion
          username: username
        meta: {}
        links: {}
    NetworkEquipmentReProvisionOptions:
      required:
      - networkEquipmentId
      - reprovisionType
      type: object
      properties:
        networkEquipmentId:
          type: number
        reprovisionType:
          type: string
          enum:
          - full
          - overlay-network
    NetworkEquipmentReProvisionResponse:
      type: object
      properties:
        jobInfo:
          $ref: '#/components/schemas/AfcJobInfo'
      example:
        jobInfo:
          afcGroupId: 1.4658129805029452
          afcId: 6.027456183070403
    Storage:
      required:
      - drivePriority
      - inMaintenance
      - managementHost
      - managementPassword
      - managementUsername
      - name
      - sharedDrivePriority
      - siteId
      - storageDriver
      - storageId
      - storageTechnology
      - storageType
      - subnetType
      type: object
      properties:
        storageId:
          type: number
          description: Id of the Storage
        userId:
          type: number
          description: Id of the owner
        siteId:
          type: number
          description: Id of the site
        storageDriver:
          type: string
          description: Storage driver
          enum:
          - dummy_driver
          - nexenta3
          - nexenta4
          - bigstep_storage
          - hp_msa_1040
          - unity_storage
          - power_max
          - power_flex
          - power_scale
          - ecs
        storageTechnology:
          type: string
          description: Storage technology
          enum:
          - block
          - file
          - object
        storageType:
          type: string
          description: Storage type
          enum:
          - iscsi_ssd
          - iscsi_hdd
          - dummy
        name:
          type: string
          description: Name of the storage
        iscsiHost:
          type: string
          description: ISCSI host
        iscsiPort:
          type: number
          description: ISCSI port
        managementHost:
          type: string
          description: Management host
        managementUsername:
          type: string
          description: Username
        managementPassword:
          type: string
          description: Password
        options:
          type: object
          description: Options for the storage
        inMaintenance:
          type: number
          description: Specifies if the storage is in maintenance
        targetIQN:
          type: string
          description: Target IQN
        isExperimental:
          type: number
          description: Specifies if the storage is experimental
        drivePriority:
          type: number
          description: Specifies if the drive priority
          default: 50
        sharedDrivePriority:
          type: number
          description: Specifies if the drive priority
          default: 50
        alternateSanIPs:
          type: array
          description: Alternate SAN IPs
          items:
            type: string
        tags:
          type: array
          description: Tags
          items:
            type: string
        portGroupAllocationOrder:
          type: object
          description: Port group allocation order
        portGroupPhysicalPorts:
          type: object
          description: Port group physical ports
        defaultIoLimitPolicy:
          type: string
          description: Default IO limit policy
        subnetType:
          type: string
          description: Subnet type
          enum:
          - ipv4
          - ipv6
        arrayId:
          type: string
          description: Array id
        directorId:
          type: string
          description: Director id
      example:
        inMaintenance: 5.637376656633329
        storageTechnology: block
        managementHost: managementHost
        managementUsername: managementUsername
        storageDriver: dummy_driver
        targetIQN: targetIQN
        options: {}
        drivePriority: 7.061401241503109
        iscsiPort: 5.962133916683182
        portGroupPhysicalPorts: {}
        storageId: 0.8008281904610115
        alternateSanIPs:
        - alternateSanIPs
        - alternateSanIPs
        portGroupAllocationOrder: {}
        directorId: directorId
        userId: 6.027456183070403
        arrayId: arrayId
        sharedDrivePriority: 9.301444243932576
        tags:
        - tags
        - tags
        defaultIoLimitPolicy: defaultIoLimitPolicy
        isExperimental: 2.3021358869347655
        managementPassword: managementPassword
        name: name
        siteId: 1.4658129805029452
        storageType: iscsi_ssd
        subnetType: ipv4
        iscsiHost: iscsiHost
    StorageList:
      required:
      - data
      - links
      - meta
      type: object
      properties:
        data:
          type: array
          description: List of Storages
          items:
            $ref: '#/components/schemas/Storage'
        meta:
          type: object
          description: Meta information
        links:
          type: object
          description: Links to other resources
      example:
        data:
        - inMaintenance: 5.637376656633329
          storageTechnology: block
          managementHost: managementHost
          managementUsername: managementUsername
          storageDriver: dummy_driver
          targetIQN: targetIQN
          options: {}
          drivePriority: 7.061401241503109
          iscsiPort: 5.962133916683182
          portGroupPhysicalPorts: {}
          storageId: 0.8008281904610115
          alternateSanIPs:
          - alternateSanIPs
          - alternateSanIPs
          portGroupAllocationOrder: {}
          directorId: directorId
          userId: 6.027456183070403
          arrayId: arrayId
          sharedDrivePriority: 9.301444243932576
          tags:
          - tags
          - tags
          defaultIoLimitPolicy: defaultIoLimitPolicy
          isExperimental: 2.3021358869347655
          managementPassword: managementPassword
          name: name
          siteId: 1.4658129805029452
          storageType: iscsi_ssd
          subnetType: ipv4
          iscsiHost: iscsiHost
        - inMaintenance: 5.637376656633329
          storageTechnology: block
          managementHost: managementHost
          managementUsername: managementUsername
          storageDriver: dummy_driver
          targetIQN: targetIQN
          options: {}
          drivePriority: 7.061401241503109
          iscsiPort: 5.962133916683182
          portGroupPhysicalPorts: {}
          storageId: 0.8008281904610115
          alternateSanIPs:
          - alternateSanIPs
          - alternateSanIPs
          portGroupAllocationOrder: {}
          directorId: directorId
          userId: 6.027456183070403
          arrayId: arrayId
          sharedDrivePriority: 9.301444243932576
          tags:
          - tags
          - tags
          defaultIoLimitPolicy: defaultIoLimitPolicy
          isExperimental: 2.3021358869347655
          managementPassword: managementPassword
          name: name
          siteId: 1.4658129805029452
          storageType: iscsi_ssd
          subnetType: ipv4
          iscsiHost: iscsiHost
        meta: {}
        links: {}
    StorageRegistrationResponse:
      required:
      - id
      - jobInfo
      type: object
      properties:
        id:
          type: number
        jobInfo:
          $ref: '#/components/schemas/StorageRegistrationResponse_jobInfo'
      example:
        id: 0.8008281904610115
        jobInfo:
          afcGroupId: 1.4658129805029452
          afcId: 6.027456183070403
    CreateStorage:
      required:
      - managementHost
      - name
      - password
      - siteId
      - storageDriver
      - storageTechnology
      - storageType
      - subnetType
      - username
      type: object
      properties:
        userId:
          type: number
        siteId:
          type: number
        storageDriver:
          type: string
          enum:
          - dummy_driver
          - nexenta3
          - nexenta4
          - bigstep_storage
          - hp_msa_1040
          - unity_storage
          - power_max
          - power_flex
          - power_scale
          - ecs
        storageTechnology:
          type: string
          enum:
          - block
          - file
          - object
        storageType:
          type: string
          enum:
          - iscsi_ssd
          - iscsi_hdd
          - dummy
        name:
          type: string
        iscsiHost:
          type: string
        iscsiPort:
          type: number
        managementHost:
          type: string
        username:
          type: string
        password:
          type: string
        options:
          type: object
        inMaintenance:
          type: number
        targetIQN:
          type: string
        isExperimental:
          type: number
        drivePriority:
          type: number
          default: 50
        sharedDrivePriority:
          type: number
          default: 50
        alternateSanIPs:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        portGroupAllocationOrder:
          type: array
          items:
            type: string
        portGroupPhysicalPorts:
          type: object
        defaultIoLimitPolicy:
          type: string
        subnetType:
          type: string
          enum:
          - ipv4
          - ipv6
        arrayId:
          type: string
        directorId:
          type: string
        s3Hostname:
          type: string
        s3Port:
          type: number
    PatchStorage:
      type: object
      properties:
        options:
          type: object
        inMaintenance:
          type: number
        isExperimental:
          type: number
        drivePriority:
          type: number
          default: 50
        sharedDrivePriority:
          type: number
          default: 50
        tags:
          type: array
          items:
            type: string
        portGroupAllocationOrder:
          type: array
          items:
            type: string
        portGroupPhysicalPorts:
          type: object
        defaultIoLimitPolicy:
          type: string
        arrayId:
          type: string
        directorId:
          type: string
        s3Hostname:
          type: string
        s3Port:
          type: number
    CreateVMInstanceGroup:
      required:
      - diskSizeGB
      - instanceCount
      - typeId
      - volumeTemplateId
      type: object
      properties:
        instanceCount:
          type: number
          description: Number of VM instances in the VM Instance Group.
          example: 1
        typeId:
          type: number
          description: Id of the VM Type.
        diskSizeGB:
          type: number
          description: Disk size in GB for each VM Instance in the VM Instance Group.
        volumeTemplateId:
          type: number
          description: Id of the VM Volume Template.
          nullable: true
        tags:
          type: array
          description: Tags for the VM Instance Group.
          items:
            type: string
    VMInstance:
      required:
      - changeId
      - createdTimestamp
      - diskSizeGB
      - groupId
      - id
      - infrastructureId
      - label
      - links
      - operation
      - serviceStatus
      - typeId
      - updatedTimestamp
      - vmId
      type: object
      properties:
        id:
          type: number
          description: VM Instance ID
        groupId:
          type: number
          description: Id of the VM Instance Group.
        infrastructureId:
          type: number
          description: Id of the Infrastructure.
        label:
          type: string
          description: Name of the VM Instance.
        vmId:
          type: number
          description: Id of the VM.
        typeId:
          type: number
          description: Id of the VM Type.
        tags:
          type: array
          description: Tags for the VM Instance.
          items:
            type: string
        serviceStatus:
          type: string
          description: Service status of the VM Instance.
          enum:
          - active
          - ordered
          - suspended
          - stopped
          - deleted
        changeId:
          type: number
          description: Id of the VM Instance change object.
        createdTimestamp:
          type: string
          description: Timestamp of the VM Instance creation.
        updatedTimestamp:
          type: string
          description: Timestamp of the VM Instance last update.
        operation:
          type: object
          description: VM Instance change object.
        customVariables:
          type: object
          description: Custom variables for the VM Instance.
          nullable: true
        diskSizeGB:
          type: number
          description: Disk size in GB of the VM Instance.
        templateIdOrigin:
          type: number
          description: Id of the template used by the VM Instance.
          nullable: true
        vmPoolId:
          type: number
          description: Id of the VM Pool.
          nullable: true
        links:
          type: object
      example:
        vmId: 7.061401241503109
        groupId: 5.637376656633329
        createdTimestamp: createdTimestamp
        label: label
        changeId: 3.616076749251911
        vmPoolId: 7.386281948385884
        templateIdOrigin: 4.145608029883936
        updatedTimestamp: updatedTimestamp
        customVariables: {}
        tags:
        - tags
        - tags
        infrastructureId: 2.3021358869347655
        serviceStatus: active
        typeId: 9.301444243932576
        links: {}
        id: 5.962133916683182
        operation: {}
        diskSizeGB: 2.027123023002322
    VMInstanceGroupInterface:
      required:
      - changeId
      - createdTimestamp
      - groupId
      - id
      - infrastructureId
      - interfaceIndex
      - label
      - networkId
      - operation
      - serviceStatus
      - updatedTimestamp
      type: object
      properties:
        id:
          type: number
          description: Interface ID
        networkId:
          type: number
          description: Network ID
        interfaceIndex:
          type: number
          description: Interface index
        serviceStatus:
          type: string
          description: Service status of the VM Instance Group Interface.
          enum:
          - active
          - ordered
          - suspended
          - stopped
          - deleted
        groupId:
          type: number
          description: VM Instance Group ID
        infrastructureId:
          type: number
          description: Infrastructure ID
        changeId:
          type: number
          description: Operation ID
          nullable: true
        label:
          type: string
          description: Interface label
        createdTimestamp:
          type: string
          description: Timestamp of the VM Instance Group Interface creation.
        updatedTimestamp:
          type: string
          description: Timestamp of the VM Instance Group Interface update.
        operation:
          type: object
          description: Operation object for the VM Instance Group.
      example:
        infrastructureId: 4.965218492984954
        serviceStatus: active
        groupId: 1.1730742509559433
        createdTimestamp: createdTimestamp
        networkId: 6.84685269835264
        interfaceIndex: 7.457744773683766
        id: 1.4894159098541704
        changeId: 5.025004791520295
        label: label
        updatedTimestamp: updatedTimestamp
        operation: {}
    VMInstanceGroupGUISettingsDto:
      required:
      - columnIndex
      - randomInstanceID
      - rowIndex
      - showWidgetChildren
      - userAgent
      type: object
      properties:
        rowIndex:
          type: number
          description: Row index of the VM Instance Group.
        columnIndex:
          type: number
          description: Column index of the VM Instance Group.
        showWidgetChildren:
          type: boolean
          description: Whether to show the VM Instance Group children in the GUI.
        randomInstanceID:
          type: string
          description: Random instance ID.
        userAgent:
          type: string
          description: User agent.
      example:
        rowIndex: 9.965781217890562
        columnIndex: 9.369310271410669
        userAgent: userAgent
        randomInstanceID: randomInstanceID
        showWidgetChildren: true
    VMInstanceGroup:
      required:
      - changeId
      - createdTimestamp
      - diskSizeGB
      - id
      - infrastructureId
      - instanceCount
      - label
      - links
      - operation
      - serviceStatus
      - tags
      - updatedTimestamp
      - vmInstances
      type: object
      properties:
        id:
          type: number
          description: Id of the VM Instance Group.
        infrastructureId:
          type: number
          description: Id of the Infrastructure.
        serviceStatus:
          type: string
          description: Status of the VM Instance Group.
          enum:
          - active
          - ordered
          - suspended
          - stopped
          - deleted
        changeId:
          type: number
          description: Id of the VM Instance Group change object.
        label:
          type: string
          description: Name of the VM Instance Group.
        instanceCount:
          type: number
          description: Number of VM instances in the VM Instance Group.
          example: 1
        createdTimestamp:
          type: string
          description: Timestamp of the VM Instance Group creation.
        updatedTimestamp:
          type: string
          description: Timestamp of the VM Instance Group update.
        operation:
          type: object
          description: Operation object for the VM Instance Group.
        vmInstances:
          type: array
          description: Array of VM instances in the VM Instance Group.
          items:
            $ref: '#/components/schemas/VMInstance'
        tags:
          type: array
          description: Tags for the VM Instance Group.
          items:
            type: string
        diskSizeGB:
          type: number
          description: Disk size in GB for each VM Instance in the VM Instance Group.
        volumeTemplateId:
          type: number
          description: Id of the template used by the VM Instance Group.
          nullable: true
        vmInstanceGroupInterfaces:
          type: array
          description: Interfaces for the VM Instance Group
          items:
            $ref: '#/components/schemas/VMInstanceGroupInterface'
        networkIdToNetworkProfileId:
          type: object
          description: Network Id to Network Profile Id for the VM Instance Group.
            This is a JSON object.
        customVariables:
          type: object
          description: Custom variables for the VM Instance.
          nullable: true
        guiSettings:
          $ref: '#/components/schemas/VMInstanceGroupGUISettingsDto'
        links:
          type: object
      example:
        createdTimestamp: createdTimestamp
        changeId: 1.4658129805029452
        label: label
        vmInstanceGroupInterfaces:
        - infrastructureId: 4.965218492984954
          serviceStatus: active
          groupId: 1.1730742509559433
          createdTimestamp: createdTimestamp
          networkId: 6.84685269835264
          interfaceIndex: 7.457744773683766
          id: 1.4894159098541704
          changeId: 5.025004791520295
          label: label
          updatedTimestamp: updatedTimestamp
          operation: {}
        - infrastructureId: 4.965218492984954
          serviceStatus: active
          groupId: 1.1730742509559433
          createdTimestamp: createdTimestamp
          networkId: 6.84685269835264
          interfaceIndex: 7.457744773683766
          id: 1.4894159098541704
          changeId: 5.025004791520295
          label: label
          updatedTimestamp: updatedTimestamp
          operation: {}
        updatedTimestamp: updatedTimestamp
        customVariables: {}
        tags:
        - tags
        - tags
        infrastructureId: 6.027456183070403
        volumeTemplateId: 1.0246457001441578
        serviceStatus: active
        instanceCount: 1
        vmInstances:
        - vmId: 7.061401241503109
          groupId: 5.637376656633329
          createdTimestamp: createdTimestamp
          label: label
          changeId: 3.616076749251911
          vmPoolId: 7.386281948385884
          templateIdOrigin: 4.145608029883936
          updatedTimestamp: updatedTimestamp
          customVariables: {}
          tags:
          - tags
          - tags
          infrastructureId: 2.3021358869347655
          serviceStatus: active
          typeId: 9.301444243932576
          links: {}
          id: 5.962133916683182
          operation: {}
          diskSizeGB: 2.027123023002322
        - vmId: 7.061401241503109
          groupId: 5.637376656633329
          createdTimestamp: createdTimestamp
          label: label
          changeId: 3.616076749251911
          vmPoolId: 7.386281948385884
          templateIdOrigin: 4.145608029883936
          updatedTimestamp: updatedTimestamp
          customVariables: {}
          tags:
          - tags
          - tags
          infrastructureId: 2.3021358869347655
          serviceStatus: active
          typeId: 9.301444243932576
          links: {}
          id: 5.962133916683182
          operation: {}
          diskSizeGB: 2.027123023002322
        links: {}
        id: 0.8008281904610115
        operation: {}
        guiSettings:
          rowIndex: 9.965781217890562
          columnIndex: 9.369310271410669
          userAgent: userAgent
          randomInstanceID: randomInstanceID
          showWidgetChildren: true
        diskSizeGB: 1.2315135367772556
        networkIdToNetworkProfileId: {}
    UpdateVMInstanceGroupInterface:
      required:
      - id
      type: object
      properties:
        id:
          type: number
          description: Interface ID
        networkId:
          type: number
          description: Network ID
    UpdateVMInstanceGroup:
      type: object
      properties:
        label:
          type: string
          description: Label for the VM Instance Group.
        tags:
          type: array
          description: Tags for the VM Instance Group.
          items:
            type: string
        guiSettings:
          $ref: '#/components/schemas/VMInstanceGroupGUISettingsDto'
        vmInstanceGroupInterfaces:
          type: array
          description: Interfaces for the VM Instance Group
          items:
            $ref: '#/components/schemas/UpdateVMInstanceGroupInterface'
        customVariables:
          type: object
          description: Custom variables for the VM Instance.
          nullable: true
    CreateVMInstanceGroupInterface:
      type: object
      properties:
        networkId:
          type: number
          description: Network ID for the interface. Can be null if the interface
            is not connected to any network
          nullable: true
    UpdateVMInstanceGroupNetwork:
      type: object
      properties:
        networkProfileId:
          type: number
          description: Network Profile ID
          nullable: true
    CreateVMInstance:
      required:
      - groupId
      - typeId
      type: object
      properties:
        groupId:
          type: number
          description: Id of the VM Instance Group.
        typeId:
          type: number
          description: Id of the VM Type.
        tags:
          type: array
          description: Tags for the VM Instance.
          items:
            type: string
    UpdateVMInstance:
      type: object
      properties:
        tags:
          type: array
          description: Tags for the VM Instance.
          items:
            type: string
        diskSizeGB:
          type: number
          description: Disk size in GB for the VM Instance.
        customVariables:
          type: object
          description: Custom variables for the VM Instance.
          nullable: true
    CreateNetwork:
      type: object
      properties:
        label:
          type: string
          description: Label of the Network.
    Network:
      required:
      - createdTimestamp
      - infrastructureId
      - label
      - networkId
      - networkType
      - serviceStatus
      - subdomain
      - subdomainPermanent
      - updatedTimestamp
      type: object
      properties:
        networkId:
          type: number
          description: Id of the Network.
        networkType:
          type: string
          description: Type of the Network.
          enum:
          - lan
          - wan
          - san
        infrastructureId:
          type: number
          description: Id of the Infrastructure.
        serviceStatus:
          type: string
          description: Network Service status.
          enum:
          - active
          - ordered
          - suspended
          - stopped
          - deleted
        label:
          type: string
          description: Name of the Network.
        subdomain:
          type: string
          description: Subdomain of the Network.
        subdomainPermanent:
          type: string
          description: Permanent subdomain of the Network.
        createdTimestamp:
          type: string
          description: Timestamp of the Network creation.
        updatedTimestamp:
          type: string
          description: Timestamp of the Network update.
      example:
        infrastructureId: 6.027456183070403
        serviceStatus: active
        createdTimestamp: createdTimestamp
        subdomain: subdomain
        networkId: 0.8008281904610115
        label: label
        subdomainPermanent: subdomainPermanent
        networkType: lan
        updatedTimestamp: updatedTimestamp
    GenericGUISettings:
      required:
      - columnIndex
      - randomInstanceID
      - rowIndex
      - showWidgetChildren
      - userAgent
      type: object
      properties:
        rowIndex:
          type: number
          description: Row index of the object.
        columnIndex:
          type: number
          description: Column index of the object.
        showWidgetChildren:
          type: boolean
          description: Whether to show the object children in the GUI.
        randomInstanceID:
          type: string
          description: Random instance ID.
        userAgent:
          type: string
          description: User agent.
      example:
        rowIndex: 9.301444243932576
        columnIndex: 3.616076749251911
        userAgent: userAgent
        randomInstanceID: randomInstanceID
        showWidgetChildren: true
    FileShareExtendedInfo:
      required:
      - infrastructure
      type: object
      properties:
        id:
          type: number
          description: Id of the File Share
        changeId:
          type: number
          description: Change id of the File Share
        infrastructureId:
          type: number
          description: Infrastructure id of the File Share
        sizeGB:
          type: number
          description: Disk size in GB for File Share
        createdTimestamp:
          type: string
          description: Timestamp of the File Share creation.
        updatedTimestamp:
          type: string
          description: Timestamp of the File Share last update.
        storagePoolId:
          type: number
          description: Id of the storage pool the File Share is assigned to
        serviceStatus:
          type: string
          description: Service status of the File Share
          enum:
          - ordered
          - active
          - deleted
          - stopped
        label:
          type: string
          description: Label of the File Share.
        subdomain:
          type: string
          description: Subdomain of the File Share.
        subdomainPermanent:
          type: string
          description: Subdomain permanent of the File Share.
        dnsSubdomainId:
          type: number
          description: Id of the DNS subdomain for the File Share.
        networkVlanId:
          type: number
          description: Id of the VLAN for the File Share.
        guiSettings:
          $ref: '#/components/schemas/GenericGUISettings'
        endpoint:
          type: string
          description: Endpoint of the File Share.
          nullable: true
        infrastructure:
          type: object
          description: Infrastructure information
        links:
          type: object
      example:
        sizeGB: 5.962133916683182
        dnsSubdomainId: 2.3021358869347655
        createdTimestamp: createdTimestamp
        changeId: 6.027456183070403
        label: label
        subdomainPermanent: subdomainPermanent
        updatedTimestamp: updatedTimestamp
        endpoint: endpoint
        infrastructureId: 1.4658129805029452
        serviceStatus: ordered
        infrastructure: {}
        networkVlanId: 7.061401241503109
        subdomain: subdomain
        links: {}
        id: 0.8008281904610115
        storagePoolId: 5.637376656633329
        guiSettings:
          rowIndex: 9.301444243932576
          columnIndex: 3.616076749251911
          userAgent: userAgent
          randomInstanceID: randomInstanceID
          showWidgetChildren: true
    CreateFileShare:
      required:
      - sizeGB
      type: object
      properties:
        label:
          type: string
          description: Display name of the File Share.
        sizeGB:
          type: number
          description: Disk size in GB for File Share
    FileShare:
      required:
      - changeId
      - createdTimestamp
      - id
      - infrastructureId
      - label
      - links
      - serviceStatus
      - sizeGB
      - updatedTimestamp
      type: object
      properties:
        id:
          type: number
          description: Id of the File Share
        changeId:
          type: number
          description: Change id of the File Share
        infrastructureId:
          type: number
          description: Infrastructure id of the File Share
        sizeGB:
          type: number
          description: Disk size in GB for File Share
        createdTimestamp:
          type: string
          description: Timestamp of the File Share creation.
        updatedTimestamp:
          type: string
          description: Timestamp of the File Share last update.
        storagePoolId:
          type: number
          description: Id of the storage pool the File Share is assigned to
        serviceStatus:
          type: string
          description: Service status of the File Share
          enum:
          - ordered
          - active
          - deleted
          - stopped
        label:
          type: string
          description: Label of the File Share.
        subdomain:
          type: string
          description: Subdomain of the File Share.
        subdomainPermanent:
          type: string
          description: Subdomain permanent of the File Share.
        dnsSubdomainId:
          type: number
          description: Id of the DNS subdomain for the File Share.
        networkVlanId:
          type: number
          description: Id of the VLAN for the File Share.
        guiSettings:
          $ref: '#/components/schemas/GenericGUISettings'
        endpoint:
          type: string
          description: Endpoint of the File Share.
          nullable: true
        operation:
          type: string
          description: Operation object of the File Share.
        links:
          type: object
      example:
        sizeGB: 5.962133916683182
        dnsSubdomainId: 2.3021358869347655
        createdTimestamp: createdTimestamp
        changeId: 6.027456183070403
        label: label
        subdomainPermanent: subdomainPermanent
        updatedTimestamp: updatedTimestamp
        endpoint: endpoint
        infrastructureId: 1.4658129805029452
        serviceStatus: ordered
        networkVlanId: 7.061401241503109
        subdomain: subdomain
        links: {}
        id: 0.8008281904610115
        storagePoolId: 5.637376656633329
        guiSettings:
          rowIndex: 9.301444243932576
          columnIndex: 3.616076749251911
          userAgent: userAgent
          randomInstanceID: randomInstanceID
          showWidgetChildren: true
        operation: operation
    FileShareList:
      required:
      - data
      - links
      - meta
      type: object
      properties:
        data:
          type: array
          description: List of File Shares
          items:
            $ref: '#/components/schemas/FileShareExtendedInfo'
        meta:
          type: object
          description: Meta information
        links:
          type: object
          description: Links to other resources
      example:
        data:
        - sizeGB: 5.962133916683182
          dnsSubdomainId: 2.3021358869347655
          createdTimestamp: createdTimestamp
          changeId: 6.027456183070403
          label: label
          subdomainPermanent: subdomainPermanent
          updatedTimestamp: updatedTimestamp
          endpoint: endpoint
          infrastructureId: 1.4658129805029452
          serviceStatus: ordered
          infrastructure: {}
          networkVlanId: 7.061401241503109
          subdomain: subdomain
          links: {}
          id: 0.8008281904610115
          storagePoolId: 5.637376656633329
          guiSettings:
            rowIndex: 9.301444243932576
            columnIndex: 3.616076749251911
            userAgent: userAgent
            randomInstanceID: randomInstanceID
            showWidgetChildren: true
        - sizeGB: 5.962133916683182
          dnsSubdomainId: 2.3021358869347655
          createdTimestamp: createdTimestamp
          changeId: 6.027456183070403
          label: label
          subdomainPermanent: subdomainPermanent
          updatedTimestamp: updatedTimestamp
          endpoint: endpoint
          infrastructureId: 1.4658129805029452
          serviceStatus: ordered
          infrastructure: {}
          networkVlanId: 7.061401241503109
          subdomain: subdomain
          links: {}
          id: 0.8008281904610115
          storagePoolId: 5.637376656633329
          guiSettings:
            rowIndex: 9.301444243932576
            columnIndex: 3.616076749251911
            userAgent: userAgent
            randomInstanceID: randomInstanceID
            showWidgetChildren: true
        meta: {}
        links: {}
    UpdateFileShare:
      type: object
      properties:
        sizeGB:
          type: number
          description: Disk size in GB for File Share
        label:
          type: string
          description: Label of the File Share.
        guiSettings:
          $ref: '#/components/schemas/GenericGUISettings'
    FileShareHosts:
      required:
      - instanceArray
      type: object
      properties:
        instanceArray:
          type: object
          description: File Share Hosts.
      example:
        instanceArray: {}
    FileShareHostsModifyBulk:
      required:
      - fileShareHostBulkOperations
      type: object
      properties:
        fileShareHostBulkOperations:
          type: array
          description: List of operations to be performed on the File Share Hosts
          items:
            $ref: '#/components/schemas/FileShareHostBulkOperation'
    FileShareHostBulkOperation:
      required:
      - instanceArrayId
      - operationType
      type: object
      properties:
        instanceArrayId:
          type: number
          description: Id of the Instance Array Host that will be modified
        operationType:
          type: string
          description: Operation type for the Instance Array Host
          enum:
          - add
          - remove
    BucketExtendedInfo:
      required:
      - infrastructure
      type: object
      properties:
        id:
          type: number
          description: Id of the Bucket
        changeId:
          type: number
          description: Change id of the Bucket
        infrastructureId:
          type: number
          description: Infrastructure id of the Bucket
        sizeGB:
          type: number
          description: Disk size in GB for Bucket
        createdTimestamp:
          type: string
          description: Timestamp of the Bucket creation.
        updatedTimestamp:
          type: string
          description: Timestamp of the Bucket last update.
        storagePoolId:
          type: number
          description: Id of the storage pool the Bucket is assigned to
        serviceStatus:
          type: string
          description: Service status of the Bucket
          enum:
          - ordered
          - active
          - deleted
          - stopped
        label:
          type: string
          description: Label of the Bucket.
        subdomain:
          type: string
          description: Subdomain of the Bucket.
        subdomainPermanent:
          type: string
          description: Subdomain permanent of the Bucket.
        dnsSubdomainId:
          type: number
          description: Id of the DNS subdomain for the Bucket.
        networkVlanId:
          type: number
          description: Id of the VLAN for the Bucket.
        guiSettings:
          $ref: '#/components/schemas/GenericGUISettings'
        endpoint:
          type: string
          description: Endpoint of the Bucket.
          nullable: true
        accessKeyId:
          type: string
          description: Endpoint of the Bucket.
          nullable: true
        secretKey:
          type: string
          description: Endpoint of the Bucket.
          nullable: true
        infrastructure:
          type: object
          description: Infrastructure information
        links:
          type: object
      example:
        accessKeyId: accessKeyId
        sizeGB: 5.962133916683182
        dnsSubdomainId: 2.3021358869347655
        secretKey: secretKey
        createdTimestamp: createdTimestamp
        changeId: 6.027456183070403
        label: label
        subdomainPermanent: subdomainPermanent
        updatedTimestamp: updatedTimestamp
        endpoint: endpoint
        infrastructureId: 1.4658129805029452
        serviceStatus: ordered
        infrastructure: {}
        networkVlanId: 7.061401241503109
        subdomain: subdomain
        links: {}
        id: 0.8008281904610115
        storagePoolId: 5.637376656633329
        guiSettings:
          rowIndex: 9.301444243932576
          columnIndex: 3.616076749251911
          userAgent: userAgent
          randomInstanceID: randomInstanceID
          showWidgetChildren: true
    CreateBucket:
      required:
      - sizeGB
      type: object
      properties:
        label:
          type: string
          description: Label of the Bucket.
        sizeGB:
          type: number
          description: Disk size in GB for Bucket
    Bucket:
      required:
      - changeId
      - createdTimestamp
      - id
      - infrastructureId
      - label
      - links
      - serviceStatus
      - sizeGB
      - updatedTimestamp
      type: object
      properties:
        id:
          type: number
          description: Id of the Bucket
        changeId:
          type: number
          description: Change id of the Bucket
        infrastructureId:
          type: number
          description: Infrastructure id of the Bucket
        sizeGB:
          type: number
          description: Disk size in GB for Bucket
        createdTimestamp:
          type: string
          description: Timestamp of the Bucket creation.
        updatedTimestamp:
          type: string
          description: Timestamp of the Bucket last update.
        storagePoolId:
          type: number
          description: Id of the storage pool the Bucket is assigned to
        serviceStatus:
          type: string
          description: Service status of the Bucket
          enum:
          - ordered
          - active
          - deleted
          - stopped
        label:
          type: string
          description: Label of the Bucket.
        subdomain:
          type: string
          description: Subdomain of the Bucket.
        subdomainPermanent:
          type: string
          description: Subdomain permanent of the Bucket.
        dnsSubdomainId:
          type: number
          description: Id of the DNS subdomain for the Bucket.
        networkVlanId:
          type: number
          description: Id of the VLAN for the Bucket.
        guiSettings:
          $ref: '#/components/schemas/GenericGUISettings'
        endpoint:
          type: string
          description: Endpoint of the Bucket.
          nullable: true
        accessKeyId:
          type: string
          description: Endpoint of the Bucket.
          nullable: true
        secretKey:
          type: string
          description: Endpoint of the Bucket.
          nullable: true
        operation:
          type: string
          description: Operation object of the Bucket.
        links:
          type: object
      example:
        accessKeyId: accessKeyId
        sizeGB: 5.962133916683182
        dnsSubdomainId: 2.3021358869347655
        secretKey: secretKey
        createdTimestamp: createdTimestamp
        changeId: 6.027456183070403
        label: label
        subdomainPermanent: subdomainPermanent
        updatedTimestamp: updatedTimestamp
        endpoint: endpoint
        infrastructureId: 1.4658129805029452
        serviceStatus: ordered
        networkVlanId: 7.061401241503109
        subdomain: subdomain
        links: {}
        id: 0.8008281904610115
        storagePoolId: 5.637376656633329
        guiSettings:
          rowIndex: 9.301444243932576
          columnIndex: 3.616076749251911
          userAgent: userAgent
          randomInstanceID: randomInstanceID
          showWidgetChildren: true
        operation: operation
    BucketList:
      required:
      - data
      - links
      - meta
      type: object
      properties:
        data:
          type: array
          description: List of Buckets
          items:
            $ref: '#/components/schemas/BucketExtendedInfo'
        meta:
          type: object
          description: Meta information
        links:
          type: object
          description: Links to other resources
      example:
        data:
        - accessKeyId: accessKeyId
          sizeGB: 5.962133916683182
          dnsSubdomainId: 2.3021358869347655
          secretKey: secretKey
          createdTimestamp: createdTimestamp
          changeId: 6.027456183070403
          label: label
          subdomainPermanent: subdomainPermanent
          updatedTimestamp: updatedTimestamp
          endpoint: endpoint
          infrastructureId: 1.4658129805029452
          serviceStatus: ordered
          infrastructure: {}
          networkVlanId: 7.061401241503109
          subdomain: subdomain
          links: {}
          id: 0.8008281904610115
          storagePoolId: 5.637376656633329
          guiSettings:
            rowIndex: 9.301444243932576
            columnIndex: 3.616076749251911
            userAgent: userAgent
            randomInstanceID: randomInstanceID
            showWidgetChildren: true
        - accessKeyId: accessKeyId
          sizeGB: 5.962133916683182
          dnsSubdomainId: 2.3021358869347655
          secretKey: secretKey
          createdTimestamp: createdTimestamp
          changeId: 6.027456183070403
          label: label
          subdomainPermanent: subdomainPermanent
          updatedTimestamp: updatedTimestamp
          endpoint: endpoint
          infrastructureId: 1.4658129805029452
          serviceStatus: ordered
          infrastructure: {}
          networkVlanId: 7.061401241503109
          subdomain: subdomain
          links: {}
          id: 0.8008281904610115
          storagePoolId: 5.637376656633329
          guiSettings:
            rowIndex: 9.301444243932576
            columnIndex: 3.616076749251911
            userAgent: userAgent
            randomInstanceID: randomInstanceID
            showWidgetChildren: true
        meta: {}
        links: {}
    UpdateBucket:
      type: object
      properties:
        sizeGB:
          type: number
          description: Disk size in GB for Bucket
        label:
          type: string
          description: Label of the Bucket.
        guiSettings:
          $ref: '#/components/schemas/GenericGUISettings'
    RemoteConsoleInfoDto:
      required:
      - activeConnections
      type: object
      properties:
        activeConnections:
          type: number
          description: Active Remote Console connections
          example: 1
      example:
        activeConnections: 1
    AIGenerateRequestDto:
      required:
      - datacenter
      - prompt
      type: object
      properties:
        datacenter:
          type: string
          description: Datacenter that is being filtered
        prompt:
          type: string
          description: String input sent to the AI
    AIGenerateResponseDto:
      required:
      - result
      - steps
      type: object
      properties:
        result:
          type: string
          description: Response to the question asked by the user
        steps:
          type: string
          description: Steps to be taken to achieve the result
      example:
        result: result
        steps: steps
    ServerVNCInfoDto:
      required:
      - activeSessions
      - enable
      - maxSessions
      - port
      - timeout
      type: object
      properties:
        activeSessions:
          type: number
          description: Active VNC sessions
          example: 1
        maxSessions:
          type: number
          description: Max active VNC sessions
          example: 2
        port:
          type: number
          description: VNC port
          example: 5900
        timeout:
          type: number
          description: VNC timeout
          example: 0
        enable:
          type: string
          description: VNC enabled
          example: Enabled
      example:
        maxSessions: 2
        port: 5900
        activeSessions: 1
        enable: Enabled
        timeout: 0
    ServerPowerSetDto:
      required:
      - powerCommand
      type: object
      properties:
        powerCommand:
          type: string
          description: The power state of the server
          enum:
          - "on"
          - reset
          - soft
          - "off"
    NetworkDevicePortStatusDto:
      required:
      - ports
      - status
      type: object
      properties:
        ports:
          type: array
          description: The ports of the network device that will have their status
            changed
          example:
          - Eth0/0
          - Eth0/1
          items:
            type: string
        status:
          type: boolean
          description: The new status of the ports
          example: true
    NetworkDeviceStatusDto:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          description: The new network device status
          example: active
          enum:
          - active
          - failed
          - decommissioned
          - registering
    DiscoveryQueryDto:
      required:
      - discover
      - persistData
      - returnData
      type: object
      properties:
        discover:
          type: array
          items:
            type: string
            enum:
            - ports
            - hardware
            - software
        returnData:
          type: boolean
        persistData:
          type: boolean
    ExtensionDependency:
      required:
      - controllerVersion
      - osTemplates
      type: object
      properties:
        controllerVersion:
          type: string
          description: Metalsoft Controller version required by the extension.
        osTemplates:
          type: array
          description: List of OS templates required by the extension.
          items:
            type: string
      example:
        controllerVersion: controllerVersion
        osTemplates:
        - osTemplates
        - osTemplates
    ExtensionInput:
      required:
      - inputType
      - label
      - name
      - options
      type: object
      properties:
        label:
          type: string
          description: Label of the input.
        name:
          type: string
          description: Name of the input.
        inputType:
          type: string
          description: Type of the input.
          enum:
          - ExtensionInputString
          - ExtensionInputInteger
          - ExtensionInputServerType
          - ExtensionInputOsTemplate
          - ExtensionInputBoolean
        options:
          description: Input options.
          oneOf:
          - $ref: '#/components/schemas/ExtensionInputString'
          - $ref: '#/components/schemas/ExtensionInputInteger'
          - $ref: '#/components/schemas/ExtensionInputServerType'
          - $ref: '#/components/schemas/ExtensionInputOsTemplate'
          - $ref: '#/components/schemas/ExtensionInputBoolean'
      example:
        name: name
        options: ""
        inputType: ExtensionInputString
        label: label
    ExtensionOutput:
      required:
      - label
      - name
      - outputType
      - template
      type: object
      properties:
        label:
          type: string
          description: Label of the output.
        name:
          type: string
          description: Name of the output.
        outputType:
          type: string
          description: Type of the output.
        template:
          type: string
          description: Template of the output.
      example:
        template: template
        name: name
        outputType: outputType
        label: label
    CustomVariable:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: Custom variable name.
        value:
          type: string
          description: Custom variable value.
      example:
        name: name
        value: value
    ExtensionInstanceArray:
      required:
      - instanceCount
      - label
      - osTemplate
      - serverType
      type: object
      properties:
        label:
          type: string
          description: Label of the instance array.
        instanceCount:
          type: string
          description: Instance count value or reference to variable.
        serverType:
          type: string
          description: Server type variable reference.
        osTemplate:
          type: string
          description: OS template variable reference.
        connectedSharedDrives:
          type: array
          description: Connected shared drive arrays.
          items:
            type: string
        customVariables:
          type: array
          description: Custom variables. The value may be a reference to an input
            variable.
          items:
            $ref: '#/components/schemas/CustomVariable'
        dependencies:
          type: array
          description: Labels of instance arrays this one depends on.
          items:
            type: string
      example:
        connectedSharedDrives:
        - connectedSharedDrives
        - connectedSharedDrives
        osTemplate: osTemplate
        instanceCount: instanceCount
        serverType: serverType
        label: label
        customVariables:
        - name: name
          value: value
        - name: name
          value: value
        dependencies:
        - dependencies
        - dependencies
    ExtensionSharedDrive:
      required:
      - label
      - sizeGb
      type: object
      properties:
        label:
          type: string
          description: Label of the shared drive array.
        sizeGb:
          type: number
          description: Size of the shared drive array in GB..
          example: 10
      example:
        sizeGb: 10
        label: label
    ExtensionInfrastructure:
      type: object
      properties:
        instanceArrays:
          type: array
          description: Instance array details for the infrastructure requirement.
          items:
            $ref: '#/components/schemas/ExtensionInstanceArray'
        sharedDrives:
          type: array
          description: Shared drive details for the infrastructure requirement.
          items:
            $ref: '#/components/schemas/ExtensionSharedDrive'
      example:
        instanceArrays:
        - connectedSharedDrives:
          - connectedSharedDrives
          - connectedSharedDrives
          osTemplate: osTemplate
          instanceCount: instanceCount
          serverType: serverType
          label: label
          customVariables:
          - name: name
            value: value
          - name: name
            value: value
          dependencies:
          - dependencies
          - dependencies
        - connectedSharedDrives:
          - connectedSharedDrives
          - connectedSharedDrives
          osTemplate: osTemplate
          instanceCount: instanceCount
          serverType: serverType
          label: label
          customVariables:
          - name: name
            value: value
          - name: name
            value: value
          dependencies:
          - dependencies
          - dependencies
        sharedDrives:
        - sizeGb: 10
          label: label
        - sizeGb: 10
          label: label
    ExtensionAsset:
      required:
      - assetType
      - label
      - name
      - url
      type: object
      properties:
        label:
          type: string
          description: Label of the asset.
        name:
          type: string
          description: Name of the asset.
        assetType:
          type: string
          description: Type of the asset.
        url:
          type: string
          description: URL of the asset.
        requiredAssets:
          type: array
          description: Required assets by this asset.
          items:
            type: string
      example:
        name: name
        label: label
        requiredAssets:
        - requiredAssets
        - requiredAssets
        url: url
        assetType: assetType
    ExtensionTask:
      required:
      - label
      - options
      - taskType
      type: object
      properties:
        label:
          type: string
          description: Label of the task.
        taskType:
          type: string
          description: Type of the task.
          enum:
          - ExtensionTaskAnsible
          - ExtensionTaskWebhook
        options:
          description: Task options.
          oneOf:
          - $ref: '#/components/schemas/ExtensionTaskAnsible'
          - $ref: '#/components/schemas/ExtensionTaskWebhook'
      example:
        taskType: ExtensionTaskAnsible
        options: ""
        label: label
    ExtensionActions:
      type: object
      properties:
        preDeploy:
          type: array
          description: Pre-deploy tasks.
          items:
            $ref: '#/components/schemas/ExtensionTask'
        postDeploy:
          type: array
          description: Post-deploy tasks.
          items:
            $ref: '#/components/schemas/ExtensionTask'
      example:
        preDeploy:
        - taskType: ExtensionTaskAnsible
          options: ""
          label: label
        - taskType: ExtensionTaskAnsible
          options: ""
          label: label
        postDeploy:
        - null
        - null
    ExtensionDefinitionDto:
      required:
      - assets
      - dependencies
      - extensionType
      - extensionVersion
      - icon
      - infrastructure
      - inputs
      - kind
      - name
      - outputs
      - schemaVersion
      - vendor
      type: object
      properties:
        kind:
          type: string
          description: The kind of extension.
        schemaVersion:
          type: string
          description: Schema version of the extension.
        name:
          maxLength: 255
          type: string
          description: Name of the extension.
        label:
          maxLength: 63
          type: string
          description: Label of the extension.
        extensionType:
          type: string
          description: Type of the extension.
        vendor:
          type: string
          description: Vendor of the extension.
        extensionVersion:
          type: string
          description: Version of the extension.
        description:
          maxLength: 255
          type: string
          description: Description of the extension.
        icon:
          type: string
          description: Icon of the extension.
        dependencies:
          $ref: '#/components/schemas/ExtensionDependency'
        inputs:
          type: array
          description: List of inputs for the platform service.
          items:
            $ref: '#/components/schemas/ExtensionInput'
        outputs:
          type: array
          description: List of outputs for the platform service.
          items:
            $ref: '#/components/schemas/ExtensionOutput'
        infrastructure:
          $ref: '#/components/schemas/ExtensionInfrastructure'
        assets:
          type: array
          description: List of assets for the platform service.
          items:
            $ref: '#/components/schemas/ExtensionAsset'
        onCreate:
          $ref: '#/components/schemas/ExtensionActions'
        onEdit:
          $ref: '#/components/schemas/ExtensionActions'
        onDelete:
          $ref: '#/components/schemas/ExtensionActions'
      example:
        outputs:
        - template: template
          name: name
          outputType: outputType
          label: label
        - template: template
          name: name
          outputType: outputType
          label: label
        onCreate:
          preDeploy:
          - taskType: ExtensionTaskAnsible
            options: ""
            label: label
          - taskType: ExtensionTaskAnsible
            options: ""
            label: label
          postDeploy:
          - null
          - null
        schemaVersion: schemaVersion
        kind: kind
        inputs:
        - name: name
          options: ""
          inputType: ExtensionInputString
          label: label
        - name: name
          options: ""
          inputType: ExtensionInputString
          label: label
        icon: icon
        description: description
        label: label
        dependencies:
          controllerVersion: controllerVersion
          osTemplates:
          - osTemplates
          - osTemplates
        onEdit: null
        onDelete: null
        assets:
        - name: name
          label: label
          requiredAssets:
          - requiredAssets
          - requiredAssets
          url: url
          assetType: assetType
        - name: name
          label: label
          requiredAssets:
          - requiredAssets
          - requiredAssets
          url: url
          assetType: assetType
        vendor: vendor
        infrastructure:
          instanceArrays:
          - connectedSharedDrives:
            - connectedSharedDrives
            - connectedSharedDrives
            osTemplate: osTemplate
            instanceCount: instanceCount
            serverType: serverType
            label: label
            customVariables:
            - name: name
              value: value
            - name: name
              value: value
            dependencies:
            - dependencies
            - dependencies
          - connectedSharedDrives:
            - connectedSharedDrives
            - connectedSharedDrives
            osTemplate: osTemplate
            instanceCount: instanceCount
            serverType: serverType
            label: label
            customVariables:
            - name: name
              value: value
            - name: name
              value: value
            dependencies:
            - dependencies
            - dependencies
          sharedDrives:
          - sizeGb: 10
            label: label
          - sizeGb: 10
            label: label
        extensionType: extensionType
        name: name
        extensionVersion: extensionVersion
    ExtensionInputString:
      type: object
      properties:
        validationRegEx:
          type: string
          description: Validation regex pattern for the input.
    ExtensionInputInteger:
      type: object
      properties:
        minValue:
          type: integer
          description: Minimum allowed value.
        maxValue:
          type: integer
          description: Maximum allowed value.
        deniedValues:
          type: array
          description: Denied values.
          items:
            type: integer
        defaultValue:
          type: integer
          description: Default value.
    ExtensionInputServerType:
      type: object
      properties:
        minCpu:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Minimum CPU cores.
        minRamGb:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Minimum RAM GBs.
        vendor:
          type: string
          description: Server vendor.
    ExtensionInputOsTemplate:
      type: object
      properties:
        osFamily:
          type: string
          description: OS family type.
    ExtensionInputBoolean:
      type: object
      properties: {}
    ExtensionTaskAnsible:
      type: object
      properties:
        asset:
          type: string
          description: Asset for the Ansible task.
        playbook:
          type: string
          description: Playbook for the Ansible task.
        executionTimeout:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Execution Timeout.
        executionTimeoutTick:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Execution Timeout Tick.
        version:
          type: string
          description: Version.
    ExtensionTaskWebhook:
      type: object
      properties:
        endpoint:
          type: string
          description: Webhook task endpoint.
        requestTemplate:
          type: string
          description: Webhook task request body template.
    ExtensionInfoDto:
      required:
      - icon
      type: object
      properties:
        id:
          type: number
          description: The extension ID
          example: 10
        slug:
          type: string
          description: The extension unique slug
          example: my-app
        name:
          maxLength: 255
          type: string
          description: The extension name
          example: My App
        label:
          maxLength: 63
          pattern: "^(?!.*-$)[a-z]{1}[a-z0-9-]{0,62}$"
          type: string
          description: The extension unique label
          example: incus-6x
        description:
          maxLength: 255
          type: string
          description: The extension description
          example: My App Description
        status:
          type: string
          description: Extension status
          example: draft
        icon:
          type: string
          description: Icon of the extension.
      example:
        name: My App
        icon: icon
        description: My App Description
        id: 10
        label: incus-6x
        slug: my-app
        status: draft
    ExtensionListDto:
      required:
      - extensions
      type: object
      properties:
        extensions:
          type: array
          description: The list of Extensions.
          items:
            $ref: '#/components/schemas/ExtensionInfoDto'
      example:
        extensions:
        - name: My App
          icon: icon
          description: My App Description
          id: 10
          label: incus-6x
          slug: my-app
          status: draft
        - name: My App
          icon: icon
          description: My App Description
          id: 10
          label: incus-6x
          slug: my-app
          status: draft
    ExtensionDto:
      required:
      - definition
      - description
      - id
      - name
      - status
      type: object
      properties:
        id:
          type: number
          description: The extension ID
          example: 10
        slug:
          type: string
          description: The extension unique slug
          example: my-app
        name:
          maxLength: 255
          type: string
          description: The extension name
          example: My App
        label:
          maxLength: 63
          pattern: "^(?!.*-$)[a-z]{1}[a-z0-9-]{0,62}$"
          type: string
          description: The extension unique label
          example: incus-6x
        description:
          maxLength: 255
          type: string
          description: The extension description
          example: My App Description
        status:
          type: string
          description: Extension status
          example: draft
        definition:
          $ref: '#/components/schemas/ExtensionDefinitionDto'
      example:
        name: My App
        description: My App Description
        definition:
          outputs:
          - template: template
            name: name
            outputType: outputType
            label: label
          - template: template
            name: name
            outputType: outputType
            label: label
          onCreate:
            preDeploy:
            - taskType: ExtensionTaskAnsible
              options: ""
              label: label
            - taskType: ExtensionTaskAnsible
              options: ""
              label: label
            postDeploy:
            - null
            - null
          schemaVersion: schemaVersion
          kind: kind
          inputs:
          - name: name
            options: ""
            inputType: ExtensionInputString
            label: label
          - name: name
            options: ""
            inputType: ExtensionInputString
            label: label
          icon: icon
          description: description
          label: label
          dependencies:
            controllerVersion: controllerVersion
            osTemplates:
            - osTemplates
            - osTemplates
          onEdit: null
          onDelete: null
          assets:
          - name: name
            label: label
            requiredAssets:
            - requiredAssets
            - requiredAssets
            url: url
            assetType: assetType
          - name: name
            label: label
            requiredAssets:
            - requiredAssets
            - requiredAssets
            url: url
            assetType: assetType
          vendor: vendor
          infrastructure:
            instanceArrays:
            - connectedSharedDrives:
              - connectedSharedDrives
              - connectedSharedDrives
              osTemplate: osTemplate
              instanceCount: instanceCount
              serverType: serverType
              label: label
              customVariables:
              - name: name
                value: value
              - name: name
                value: value
              dependencies:
              - dependencies
              - dependencies
            - connectedSharedDrives:
              - connectedSharedDrives
              - connectedSharedDrives
              osTemplate: osTemplate
              instanceCount: instanceCount
              serverType: serverType
              label: label
              customVariables:
              - name: name
                value: value
              - name: name
                value: value
              dependencies:
              - dependencies
              - dependencies
            sharedDrives:
            - sizeGb: 10
              label: label
            - sizeGb: 10
              label: label
          extensionType: extensionType
          name: name
          extensionVersion: extensionVersion
        id: 10
        label: incus-6x
        slug: my-app
        status: draft
    CreateExtensionDto:
      required:
      - definition
      - description
      - name
      type: object
      properties:
        name:
          maxLength: 255
          type: string
          description: The extension name
          example: My App
        label:
          maxLength: 63
          pattern: "^(?!.*-$)[a-z]{1}[a-z0-9-]{0,62}$"
          type: string
          description: The extension unique label
          example: incus-6x
        description:
          maxLength: 255
          type: string
          description: The extension description
          example: My App Description
        definition:
          $ref: '#/components/schemas/ExtensionDefinitionDto'
    UpdateExtensionDto:
      type: object
      properties:
        name:
          maxLength: 255
          type: string
          description: The extension name
          example: My App
        label:
          maxLength: 63
          pattern: "^(?!.*-$)[a-z]{1}[a-z0-9-]{0,62}$"
          type: string
          description: The extension unique label
          example: incus-6x
        description:
          maxLength: 255
          type: string
          description: The extension description
          example: My App Description
        definition:
          $ref: '#/components/schemas/ExtensionDefinitionDto'
    ExtensionVariable:
      required:
      - label
      - value
      type: object
      properties:
        label:
          type: string
          description: The variable label.
        value:
          type: string
          description: The variable value.
      example:
        label: label
        value: value
    CreateExtensionInstanceDto:
      type: object
      properties:
        extensionId:
          type: number
          description: The extension ID.
          example: 12
        label:
          maxLength: 63
          minLength: 1
          type: string
          description: The extension instance label. Will be automatically generated
            if not provided.
          example: ext-instance-123
        inputVariables:
          type: array
          description: Input variables values.
          items:
            $ref: '#/components/schemas/ExtensionVariable'
    ExtensionInstanceDto:
      required:
      - extensionId
      - id
      - infrastructureId
      - inputVariables
      - label
      - outputVariables
      type: object
      properties:
        id:
          type: number
          description: The extension instance ID.
          example: 1
        infrastructureId:
          type: number
          description: The infrastructure ID.
          example: 1
        extensionId:
          type: number
          description: The extension ID.
          example: 12
        label:
          maxLength: 63
          minLength: 1
          type: string
          description: The extension instance label. Will be automatically generated
            if not provided.
          example: ext-instance-123
        inputVariables:
          type: array
          description: Input variables values.
          items:
            $ref: '#/components/schemas/ExtensionVariable'
        outputVariables:
          type: array
          description: Output variables values.
          items:
            $ref: '#/components/schemas/ExtensionVariable'
      example:
        infrastructureId: 1
        outputVariables:
        - null
        - null
        id: 1
        label: ext-instance-123
        inputVariables:
        - label: label
          value: value
        - label: label
          value: value
        extensionId: 12
    ExtensionInstanceListDto:
      required:
      - extensionInstances
      type: object
      properties:
        extensionInstances:
          type: array
          description: The list of extension instances.
          items:
            $ref: '#/components/schemas/ExtensionInstanceDto'
      example:
        extensionInstances:
        - infrastructureId: 1
          outputVariables:
          - null
          - null
          id: 1
          label: ext-instance-123
          inputVariables:
          - label: label
            value: value
          - label: label
            value: value
          extensionId: 12
        - infrastructureId: 1
          outputVariables:
          - null
          - null
          id: 1
          label: ext-instance-123
          inputVariables:
          - label: label
            value: value
          - label: label
            value: value
          extensionId: 12
    UpdateExtensionInstanceDto:
      type: object
      properties:
        inputVariables:
          type: array
          description: Input variables values.
          items:
            $ref: '#/components/schemas/ExtensionVariable'
    Version:
      required:
      - version
      type: object
      properties:
        version:
          type: string
          description: The version of the installed MetalSoft software
          example: 1.0.0
        versionDate:
          type: string
          description: The release date of the version
          format: date-time
        versionBuild:
          type: string
          description: The build number of the version
      example:
        versionBuild: versionBuild
        version: 1.0.0
        versionDate: 2000-01-23T04:56:07.000+00:00
    StorageRegistrationResponse_jobInfo:
      type: object
      properties:
        afcId:
          type: number
        afcGroupId:
          type: number
      example:
        afcGroupId: 1.4658129805029452
        afcId: 6.027456183070403
  securitySchemes:
    apiKey:
      type: http
      description: API Key Authorization
      scheme: bearer
      bearerFormat: ApiKey
    JWT:
      type: http
      description: JWT Authorization
      scheme: bearer
      bearerFormat: JWT
